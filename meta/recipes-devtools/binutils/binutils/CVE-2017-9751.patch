commit 63323b5b23bd83fa7b04ea00dff593c933e9b0e3
Author: Nick Clifton <nickc@redhat.com>
Date:   Thu Jun 15 12:37:01 2017 +0100

    Fix address violation when disassembling a corrupt RL78 binary.
    
    	PR binutils/21588
    	* rl78-decode.opc (OP_BUF_LEN): Define.
    	(GETBYTE): Check for the index exceeding OP_BUF_LEN.
    	(rl78_decode_opcode): Use OP_BUF_LEN as the length of the op_buf
    	array.
    	* rl78-decode.c: Regenerate.

Upstream-Status: Backport

CVE: CVE-2017-9751
Signed-off-by: Thiruvadi Rajaraman <trajaraman@mvista.com>

Index: git/opcodes/rl78-decode.c
===================================================================
--- git.orig/opcodes/rl78-decode.c	2017-09-21 13:14:42.256835775 +0530
+++ git/opcodes/rl78-decode.c	2017-09-21 13:14:49.444888350 +0530
@@ -51,7 +51,9 @@
 #define W() rl78->size = RL78_Word
 
 #define AU ATTRIBUTE_UNUSED
-#define GETBYTE() (ld->op [ld->rl78->n_bytes++] = ld->getbyte (ld->ptr))
+
+#define OP_BUF_LEN 20
+#define GETBYTE() (ld->rl78->n_bytes < (OP_BUF_LEN - 1) ? ld->op [ld->rl78->n_bytes++] = ld->getbyte (ld->ptr): 0)
 #define B ((unsigned long) GETBYTE())
 
 #define SYNTAX(x) rl78->syntax = x
@@ -169,7 +171,7 @@
 		  RL78_Dis_Isa isa)
 {
   LocalData lds, * ld = &lds;
-  unsigned char op_buf[20] = {0};
+  unsigned char op_buf[OP_BUF_LEN] = {0};
   unsigned char *op = op_buf;
   int op0, op1;
 
@@ -201,7 +203,7 @@
                      op[0]);
             }
           SYNTAX("nop");
-#line 911 "rl78-decode.opc"
+#line 913 "rl78-decode.opc"
           ID(nop);
 
         /*----------------------------------------------------------------------*/
@@ -214,7 +216,7 @@
     case 0x07:
         {
           /** 0000 0rw1			addw	%0, %1				*/
-#line 274 "rl78-decode.opc"
+#line 276 "rl78-decode.opc"
           int rw AU = (op[0] >> 1) & 0x03;
           if (trace)
             {
@@ -224,7 +226,7 @@
               printf ("  rw = 0x%x\n", rw);
             }
           SYNTAX("addw	%0, %1");
-#line 274 "rl78-decode.opc"
+#line 276 "rl78-decode.opc"
           ID(add); W(); DR(AX); SRW(rw); Fzac;
 
         }
@@ -239,7 +241,7 @@
                      op[0]);
             }
           SYNTAX("addw	%0, %e!1");
-#line 265 "rl78-decode.opc"
+#line 267 "rl78-decode.opc"
           ID(add); W(); DR(AX); SM(None, IMMU(2)); Fzac;
 
         }
@@ -254,7 +256,7 @@
                      op[0]);
             }
           SYNTAX("addw	%0, #%1");
-#line 271 "rl78-decode.opc"
+#line 273 "rl78-decode.opc"
           ID(add); W(); DR(AX); SC(IMMU(2)); Fzac;
 
         }
@@ -269,7 +271,7 @@
                      op[0]);
             }
           SYNTAX("addw	%0, %1");
-#line 277 "rl78-decode.opc"
+#line 279 "rl78-decode.opc"
           ID(add); W(); DR(AX); SM(None, SADDR); Fzac;
 
         }
@@ -284,7 +286,7 @@
                      op[0]);
             }
           SYNTAX("xch	a, x");
-#line 1234 "rl78-decode.opc"
+#line 1236 "rl78-decode.opc"
           ID(xch); DR(A); SR(X);
 
         /*----------------------------------------------------------------------*/
@@ -301,7 +303,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %e1");
-#line 678 "rl78-decode.opc"
+#line 680 "rl78-decode.opc"
           ID(mov); DR(A); SM(B, IMMU(2));
 
         }
@@ -316,7 +318,7 @@
                      op[0]);
             }
           SYNTAX("add	%0, #%1");
-#line 228 "rl78-decode.opc"
+#line 230 "rl78-decode.opc"
           ID(add); DM(None, SADDR); SC(IMMU(1)); Fzac;
 
         /*----------------------------------------------------------------------*/
@@ -333,7 +335,7 @@
                      op[0]);
             }
           SYNTAX("add	%0, %1");
-#line 222 "rl78-decode.opc"
+#line 224 "rl78-decode.opc"
           ID(add); DR(A); SM(None, SADDR); Fzac;
 
         }
@@ -348,7 +350,7 @@
                      op[0]);
             }
           SYNTAX("add	%0, #%1");
-#line 216 "rl78-decode.opc"
+#line 218 "rl78-decode.opc"
           ID(add); DR(A); SC(IMMU(1)); Fzac;
 
         }
@@ -363,7 +365,7 @@
                      op[0]);
             }
           SYNTAX("add	%0, %e1");
-#line 204 "rl78-decode.opc"
+#line 206 "rl78-decode.opc"
           ID(add); DR(A); SM(HL, 0); Fzac;
 
         }
@@ -378,7 +380,7 @@
                      op[0]);
             }
           SYNTAX("add	%0, %ea1");
-#line 210 "rl78-decode.opc"
+#line 212 "rl78-decode.opc"
           ID(add); DR(A); SM(HL, IMMU(1)); Fzac;
 
         }
@@ -393,7 +395,7 @@
                      op[0]);
             }
           SYNTAX("add	%0, %e!1");
-#line 201 "rl78-decode.opc"
+#line 203 "rl78-decode.opc"
           ID(add); DR(A); SM(None, IMMU(2)); Fzac;
 
         }
@@ -408,7 +410,7 @@
                      op[0]);
             }
           SYNTAX("addw	%0, #%1");
-#line 280 "rl78-decode.opc"
+#line 282 "rl78-decode.opc"
           ID(add); W(); DR(SP); SC(IMMU(1)); Fzac;
 
         /*----------------------------------------------------------------------*/
@@ -425,7 +427,7 @@
                      op[0]);
             }
           SYNTAX("es:");
-#line 193 "rl78-decode.opc"
+#line 195 "rl78-decode.opc"
           DE(); SE();
           op ++;
           pc ++;
@@ -440,7 +442,7 @@
     case 0x16:
         {
           /** 0001 0ra0			movw	%0, %1				*/
-#line 859 "rl78-decode.opc"
+#line 861 "rl78-decode.opc"
           int ra AU = (op[0] >> 1) & 0x03;
           if (trace)
             {
@@ -450,7 +452,7 @@
               printf ("  ra = 0x%x\n", ra);
             }
           SYNTAX("movw	%0, %1");
-#line 859 "rl78-decode.opc"
+#line 861 "rl78-decode.opc"
           ID(mov); W(); DRW(ra); SR(AX);
 
         }
@@ -460,7 +462,7 @@
     case 0x17:
         {
           /** 0001 0ra1			movw	%0, %1				*/
-#line 856 "rl78-decode.opc"
+#line 858 "rl78-decode.opc"
           int ra AU = (op[0] >> 1) & 0x03;
           if (trace)
             {
@@ -470,7 +472,7 @@
               printf ("  ra = 0x%x\n", ra);
             }
           SYNTAX("movw	%0, %1");
-#line 856 "rl78-decode.opc"
+#line 858 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SRW(ra);
 
         }
@@ -485,7 +487,7 @@
                      op[0]);
             }
           SYNTAX("mov	%e0, %1");
-#line 729 "rl78-decode.opc"
+#line 731 "rl78-decode.opc"
           ID(mov); DM(B, IMMU(2)); SR(A);
 
         }
@@ -500,7 +502,7 @@
                      op[0]);
             }
           SYNTAX("mov	%e0, #%1");
-#line 726 "rl78-decode.opc"
+#line 728 "rl78-decode.opc"
           ID(mov); DM(B, IMMU(2)); SC(IMMU(1));
 
         }
@@ -515,7 +517,7 @@
                      op[0]);
             }
           SYNTAX("addc	%0, #%1");
-#line 260 "rl78-decode.opc"
+#line 262 "rl78-decode.opc"
           ID(addc); DM(None, SADDR); SC(IMMU(1)); Fzac;
 
         /*----------------------------------------------------------------------*/
@@ -532,7 +534,7 @@
                      op[0]);
             }
           SYNTAX("addc	%0, %1");
-#line 257 "rl78-decode.opc"
+#line 259 "rl78-decode.opc"
           ID(addc); DR(A); SM(None, SADDR); Fzac;
 
         }
@@ -547,7 +549,7 @@
                      op[0]);
             }
           SYNTAX("addc	%0, #%1");
-#line 248 "rl78-decode.opc"
+#line 250 "rl78-decode.opc"
           ID(addc); DR(A); SC(IMMU(1)); Fzac;
 
         }
@@ -562,7 +564,7 @@
                      op[0]);
             }
           SYNTAX("addc	%0, %e1");
-#line 236 "rl78-decode.opc"
+#line 238 "rl78-decode.opc"
           ID(addc); DR(A); SM(HL, 0); Fzac;
 
         }
@@ -577,7 +579,7 @@
                      op[0]);
             }
           SYNTAX("addc	%0, %ea1");
-#line 245 "rl78-decode.opc"
+#line 247 "rl78-decode.opc"
           ID(addc); DR(A); SM(HL, IMMU(1)); Fzac;
 
         }
@@ -592,7 +594,7 @@
                      op[0]);
             }
           SYNTAX("addc	%0, %e!1");
-#line 233 "rl78-decode.opc"
+#line 235 "rl78-decode.opc"
           ID(addc); DR(A); SM(None, IMMU(2)); Fzac;
 
         }
@@ -607,7 +609,7 @@
                      op[0]);
             }
           SYNTAX("subw	%0, #%1");
-#line 1198 "rl78-decode.opc"
+#line 1200 "rl78-decode.opc"
           ID(sub); W(); DR(SP); SC(IMMU(1)); Fzac;
 
         /*----------------------------------------------------------------------*/
@@ -620,7 +622,7 @@
     case 0x27:
         {
           /** 0010 0rw1			subw	%0, %1				*/
-#line 1192 "rl78-decode.opc"
+#line 1194 "rl78-decode.opc"
           int rw AU = (op[0] >> 1) & 0x03;
           if (trace)
             {
@@ -630,7 +632,7 @@
               printf ("  rw = 0x%x\n", rw);
             }
           SYNTAX("subw	%0, %1");
-#line 1192 "rl78-decode.opc"
+#line 1194 "rl78-decode.opc"
           ID(sub); W(); DR(AX); SRW(rw); Fzac;
 
         }
@@ -645,7 +647,7 @@
                      op[0]);
             }
           SYNTAX("subw	%0, %e!1");
-#line 1183 "rl78-decode.opc"
+#line 1185 "rl78-decode.opc"
           ID(sub); W(); DR(AX); SM(None, IMMU(2)); Fzac;
 
         }
@@ -660,7 +662,7 @@
                      op[0]);
             }
           SYNTAX("subw	%0, #%1");
-#line 1189 "rl78-decode.opc"
+#line 1191 "rl78-decode.opc"
           ID(sub); W(); DR(AX); SC(IMMU(2)); Fzac;
 
         }
@@ -675,7 +677,7 @@
                      op[0]);
             }
           SYNTAX("subw	%0, %1");
-#line 1195 "rl78-decode.opc"
+#line 1197 "rl78-decode.opc"
           ID(sub); W(); DR(AX); SM(None, SADDR); Fzac;
 
         }
@@ -690,7 +692,7 @@
                      op[0]);
             }
           SYNTAX("mov	%e0, %1");
-#line 741 "rl78-decode.opc"
+#line 743 "rl78-decode.opc"
           ID(mov); DM(C, IMMU(2)); SR(A);
 
         }
@@ -705,7 +707,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %e1");
-#line 684 "rl78-decode.opc"
+#line 686 "rl78-decode.opc"
           ID(mov); DR(A); SM(C, IMMU(2));
 
         }
@@ -720,7 +722,7 @@
                      op[0]);
             }
           SYNTAX("sub	%0, #%1");
-#line 1146 "rl78-decode.opc"
+#line 1148 "rl78-decode.opc"
           ID(sub); DM(None, SADDR); SC(IMMU(1)); Fzac;
 
         /*----------------------------------------------------------------------*/
@@ -737,7 +739,7 @@
                      op[0]);
             }
           SYNTAX("sub	%0, %1");
-#line 1140 "rl78-decode.opc"
+#line 1142 "rl78-decode.opc"
           ID(sub); DR(A); SM(None, SADDR); Fzac;
 
         }
@@ -752,7 +754,7 @@
                      op[0]);
             }
           SYNTAX("sub	%0, #%1");
-#line 1134 "rl78-decode.opc"
+#line 1136 "rl78-decode.opc"
           ID(sub); DR(A); SC(IMMU(1)); Fzac;
 
         }
@@ -767,7 +769,7 @@
                      op[0]);
             }
           SYNTAX("sub	%0, %e1");
-#line 1122 "rl78-decode.opc"
+#line 1124 "rl78-decode.opc"
           ID(sub); DR(A); SM(HL, 0); Fzac;
 
         }
@@ -782,7 +784,7 @@
                      op[0]);
             }
           SYNTAX("sub	%0, %ea1");
-#line 1128 "rl78-decode.opc"
+#line 1130 "rl78-decode.opc"
           ID(sub); DR(A); SM(HL, IMMU(1)); Fzac;
 
         }
@@ -797,7 +799,7 @@
                      op[0]);
             }
           SYNTAX("sub	%0, %e!1");
-#line 1119 "rl78-decode.opc"
+#line 1121 "rl78-decode.opc"
           ID(sub); DR(A); SM(None, IMMU(2)); Fzac;
 
         }
@@ -808,7 +810,7 @@
     case 0x36:
         {
           /** 0011 0rg0			movw	%0, #%1				*/
-#line 853 "rl78-decode.opc"
+#line 855 "rl78-decode.opc"
           int rg AU = (op[0] >> 1) & 0x03;
           if (trace)
             {
@@ -818,7 +820,7 @@
               printf ("  rg = 0x%x\n", rg);
             }
           SYNTAX("movw	%0, #%1");
-#line 853 "rl78-decode.opc"
+#line 855 "rl78-decode.opc"
           ID(mov); W(); DRW(rg); SC(IMMU(2));
 
         }
@@ -830,7 +832,7 @@
           case 0x00:
               {
                 /** 0011 0001 0bit 0000		btclr	%s1, $%a0			*/
-#line 416 "rl78-decode.opc"
+#line 418 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -840,7 +842,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("btclr	%s1, $%a0");
-#line 416 "rl78-decode.opc"
+#line 418 "rl78-decode.opc"
                 ID(branch_cond_clear); SM(None, SADDR); SB(bit); DC(pc+IMMS(1)+4); COND(T);
 
               /*----------------------------------------------------------------------*/
@@ -850,7 +852,7 @@
           case 0x01:
               {
                 /** 0011 0001 0bit 0001		btclr	%1, $%a0			*/
-#line 410 "rl78-decode.opc"
+#line 412 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -860,7 +862,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("btclr	%1, $%a0");
-#line 410 "rl78-decode.opc"
+#line 412 "rl78-decode.opc"
                 ID(branch_cond_clear); DC(pc+IMMS(1)+3); SR(A); SB(bit); COND(T);
 
               }
@@ -868,7 +870,7 @@
           case 0x02:
               {
                 /** 0011 0001 0bit 0010		bt	%s1, $%a0			*/
-#line 402 "rl78-decode.opc"
+#line 404 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -878,7 +880,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("bt	%s1, $%a0");
-#line 402 "rl78-decode.opc"
+#line 404 "rl78-decode.opc"
                 ID(branch_cond); SM(None, SADDR); SB(bit); DC(pc+IMMS(1)+4); COND(T);
 
               /*----------------------------------------------------------------------*/
@@ -888,7 +890,7 @@
           case 0x03:
               {
                 /** 0011 0001 0bit 0011		bt	%1, $%a0			*/
-#line 396 "rl78-decode.opc"
+#line 398 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -898,7 +900,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("bt	%1, $%a0");
-#line 396 "rl78-decode.opc"
+#line 398 "rl78-decode.opc"
                 ID(branch_cond); DC(pc+IMMS(1)+3); SR(A); SB(bit); COND(T);
 
               }
@@ -906,7 +908,7 @@
           case 0x04:
               {
                 /** 0011 0001 0bit 0100		bf	%s1, $%a0			*/
-#line 363 "rl78-decode.opc"
+#line 365 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -916,7 +918,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("bf	%s1, $%a0");
-#line 363 "rl78-decode.opc"
+#line 365 "rl78-decode.opc"
                 ID(branch_cond); SM(None, SADDR); SB(bit); DC(pc+IMMS(1)+4); COND(F);
 
               /*----------------------------------------------------------------------*/
@@ -926,7 +928,7 @@
           case 0x05:
               {
                 /** 0011 0001 0bit 0101		bf	%1, $%a0			*/
-#line 357 "rl78-decode.opc"
+#line 359 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -936,7 +938,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("bf	%1, $%a0");
-#line 357 "rl78-decode.opc"
+#line 359 "rl78-decode.opc"
                 ID(branch_cond); DC(pc+IMMS(1)+3); SR(A); SB(bit); COND(F);
 
               }
@@ -944,7 +946,7 @@
           case 0x07:
               {
                 /** 0011 0001 0cnt 0111		shl	%0, %1				*/
-#line 1075 "rl78-decode.opc"
+#line 1077 "rl78-decode.opc"
                 int cnt AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -954,7 +956,7 @@
                     printf ("  cnt = 0x%x\n", cnt);
                   }
                 SYNTAX("shl	%0, %1");
-#line 1075 "rl78-decode.opc"
+#line 1077 "rl78-decode.opc"
                 ID(shl); DR(C); SC(cnt);
 
               }
@@ -962,7 +964,7 @@
           case 0x08:
               {
                 /** 0011 0001 0cnt 1000		shl	%0, %1				*/
-#line 1072 "rl78-decode.opc"
+#line 1074 "rl78-decode.opc"
                 int cnt AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -972,7 +974,7 @@
                     printf ("  cnt = 0x%x\n", cnt);
                   }
                 SYNTAX("shl	%0, %1");
-#line 1072 "rl78-decode.opc"
+#line 1074 "rl78-decode.opc"
                 ID(shl); DR(B); SC(cnt);
 
               }
@@ -980,7 +982,7 @@
           case 0x09:
               {
                 /** 0011 0001 0cnt 1001		shl	%0, %1				*/
-#line 1069 "rl78-decode.opc"
+#line 1071 "rl78-decode.opc"
                 int cnt AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -990,7 +992,7 @@
                     printf ("  cnt = 0x%x\n", cnt);
                   }
                 SYNTAX("shl	%0, %1");
-#line 1069 "rl78-decode.opc"
+#line 1071 "rl78-decode.opc"
                 ID(shl); DR(A); SC(cnt);
 
               }
@@ -998,7 +1000,7 @@
           case 0x0a:
               {
                 /** 0011 0001 0cnt 1010		shr	%0, %1				*/
-#line 1086 "rl78-decode.opc"
+#line 1088 "rl78-decode.opc"
                 int cnt AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -1008,7 +1010,7 @@
                     printf ("  cnt = 0x%x\n", cnt);
                   }
                 SYNTAX("shr	%0, %1");
-#line 1086 "rl78-decode.opc"
+#line 1088 "rl78-decode.opc"
                 ID(shr); DR(A); SC(cnt);
 
               }
@@ -1016,7 +1018,7 @@
           case 0x0b:
               {
                 /** 0011 0001 0cnt 1011		sar	%0, %1				*/
-#line 1033 "rl78-decode.opc"
+#line 1035 "rl78-decode.opc"
                 int cnt AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -1026,7 +1028,7 @@
                     printf ("  cnt = 0x%x\n", cnt);
                   }
                 SYNTAX("sar	%0, %1");
-#line 1033 "rl78-decode.opc"
+#line 1035 "rl78-decode.opc"
                 ID(sar); DR(A); SC(cnt);
 
               }
@@ -1035,7 +1037,7 @@
           case 0x8c:
               {
                 /** 0011 0001 wcnt 1100		shlw	%0, %1				*/
-#line 1081 "rl78-decode.opc"
+#line 1083 "rl78-decode.opc"
                 int wcnt AU = (op[1] >> 4) & 0x0f;
                 if (trace)
                   {
@@ -1045,7 +1047,7 @@
                     printf ("  wcnt = 0x%x\n", wcnt);
                   }
                 SYNTAX("shlw	%0, %1");
-#line 1081 "rl78-decode.opc"
+#line 1083 "rl78-decode.opc"
                 ID(shl); W(); DR(BC); SC(wcnt);
 
               /*----------------------------------------------------------------------*/
@@ -1056,7 +1058,7 @@
           case 0x8d:
               {
                 /** 0011 0001 wcnt 1101		shlw	%0, %1				*/
-#line 1078 "rl78-decode.opc"
+#line 1080 "rl78-decode.opc"
                 int wcnt AU = (op[1] >> 4) & 0x0f;
                 if (trace)
                   {
@@ -1066,7 +1068,7 @@
                     printf ("  wcnt = 0x%x\n", wcnt);
                   }
                 SYNTAX("shlw	%0, %1");
-#line 1078 "rl78-decode.opc"
+#line 1080 "rl78-decode.opc"
                 ID(shl); W(); DR(AX); SC(wcnt);
 
               }
@@ -1075,7 +1077,7 @@
           case 0x8e:
               {
                 /** 0011 0001 wcnt 1110		shrw	%0, %1				*/
-#line 1089 "rl78-decode.opc"
+#line 1091 "rl78-decode.opc"
                 int wcnt AU = (op[1] >> 4) & 0x0f;
                 if (trace)
                   {
@@ -1085,7 +1087,7 @@
                     printf ("  wcnt = 0x%x\n", wcnt);
                   }
                 SYNTAX("shrw	%0, %1");
-#line 1089 "rl78-decode.opc"
+#line 1091 "rl78-decode.opc"
                 ID(shr); W(); DR(AX); SC(wcnt);
 
               /*----------------------------------------------------------------------*/
@@ -1096,7 +1098,7 @@
           case 0x8f:
               {
                 /** 0011 0001 wcnt 1111		sarw	%0, %1				*/
-#line 1036 "rl78-decode.opc"
+#line 1038 "rl78-decode.opc"
                 int wcnt AU = (op[1] >> 4) & 0x0f;
                 if (trace)
                   {
@@ -1106,7 +1108,7 @@
                     printf ("  wcnt = 0x%x\n", wcnt);
                   }
                 SYNTAX("sarw	%0, %1");
-#line 1036 "rl78-decode.opc"
+#line 1038 "rl78-decode.opc"
                 ID(sar); W(); DR(AX); SC(wcnt);
 
               /*----------------------------------------------------------------------*/
@@ -1116,7 +1118,7 @@
           case 0x80:
               {
                 /** 0011 0001 1bit 0000		btclr	%s1, $%a0			*/
-#line 413 "rl78-decode.opc"
+#line 415 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -1126,7 +1128,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("btclr	%s1, $%a0");
-#line 413 "rl78-decode.opc"
+#line 415 "rl78-decode.opc"
                 ID(branch_cond_clear); SM(None, SFR); SB(bit); DC(pc+IMMS(1)+4); COND(T);
 
               }
@@ -1134,7 +1136,7 @@
           case 0x81:
               {
                 /** 0011 0001 1bit 0001		btclr	%e1, $%a0			*/
-#line 407 "rl78-decode.opc"
+#line 409 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -1144,7 +1146,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("btclr	%e1, $%a0");
-#line 407 "rl78-decode.opc"
+#line 409 "rl78-decode.opc"
                 ID(branch_cond_clear); DC(pc+IMMS(1)+3); SM(HL,0); SB(bit); COND(T);
 
               }
@@ -1152,7 +1154,7 @@
           case 0x82:
               {
                 /** 0011 0001 1bit 0010		bt	%s1, $%a0			*/
-#line 399 "rl78-decode.opc"
+#line 401 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -1162,7 +1164,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("bt	%s1, $%a0");
-#line 399 "rl78-decode.opc"
+#line 401 "rl78-decode.opc"
                 ID(branch_cond); SM(None, SFR); SB(bit); DC(pc+IMMS(1)+4); COND(T);
 
               }
@@ -1170,7 +1172,7 @@
           case 0x83:
               {
                 /** 0011 0001 1bit 0011		bt	%e1, $%a0			*/
-#line 393 "rl78-decode.opc"
+#line 395 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -1180,7 +1182,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("bt	%e1, $%a0");
-#line 393 "rl78-decode.opc"
+#line 395 "rl78-decode.opc"
                 ID(branch_cond); DC(pc+IMMS(1)+3); SM(HL,0); SB(bit); COND(T);
 
               }
@@ -1188,7 +1190,7 @@
           case 0x84:
               {
                 /** 0011 0001 1bit 0100		bf	%s1, $%a0			*/
-#line 360 "rl78-decode.opc"
+#line 362 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -1198,7 +1200,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("bf	%s1, $%a0");
-#line 360 "rl78-decode.opc"
+#line 362 "rl78-decode.opc"
                 ID(branch_cond); SM(None, SFR); SB(bit); DC(pc+IMMS(1)+4); COND(F);
 
               }
@@ -1206,7 +1208,7 @@
           case 0x85:
               {
                 /** 0011 0001 1bit 0101		bf	%e1, $%a0			*/
-#line 354 "rl78-decode.opc"
+#line 356 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -1216,7 +1218,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("bf	%e1, $%a0");
-#line 354 "rl78-decode.opc"
+#line 356 "rl78-decode.opc"
                 ID(branch_cond); DC(pc+IMMS(1)+3); SM(HL,0); SB(bit); COND(F);
 
               }
@@ -1229,7 +1231,7 @@
     case 0x37:
         {
           /** 0011 0ra1			xchw	%0, %1				*/
-#line 1239 "rl78-decode.opc"
+#line 1241 "rl78-decode.opc"
           int ra AU = (op[0] >> 1) & 0x03;
           if (trace)
             {
@@ -1239,7 +1241,7 @@
               printf ("  ra = 0x%x\n", ra);
             }
           SYNTAX("xchw	%0, %1");
-#line 1239 "rl78-decode.opc"
+#line 1241 "rl78-decode.opc"
           ID(xch); W(); DR(AX); SRW(ra);
 
         /*----------------------------------------------------------------------*/
@@ -1256,7 +1258,7 @@
                      op[0]);
             }
           SYNTAX("mov	%e0, #%1");
-#line 738 "rl78-decode.opc"
+#line 740 "rl78-decode.opc"
           ID(mov); DM(C, IMMU(2)); SC(IMMU(1));
 
         }
@@ -1271,7 +1273,7 @@
                      op[0]);
             }
           SYNTAX("mov	%e0, #%1");
-#line 732 "rl78-decode.opc"
+#line 734 "rl78-decode.opc"
           ID(mov); DM(BC, IMMU(2)); SC(IMMU(1));
 
         }
@@ -1286,7 +1288,7 @@
                      op[0]);
             }
           SYNTAX("subc	%0, #%1");
-#line 1178 "rl78-decode.opc"
+#line 1180 "rl78-decode.opc"
           ID(subc); DM(None, SADDR); SC(IMMU(1)); Fzac;
 
         /*----------------------------------------------------------------------*/
@@ -1303,7 +1305,7 @@
                      op[0]);
             }
           SYNTAX("subc	%0, %1");
-#line 1175 "rl78-decode.opc"
+#line 1177 "rl78-decode.opc"
           ID(subc); DR(A); SM(None, SADDR); Fzac;
 
         }
@@ -1318,7 +1320,7 @@
                      op[0]);
             }
           SYNTAX("subc	%0, #%1");
-#line 1166 "rl78-decode.opc"
+#line 1168 "rl78-decode.opc"
           ID(subc); DR(A); SC(IMMU(1)); Fzac;
 
         }
@@ -1333,7 +1335,7 @@
                      op[0]);
             }
           SYNTAX("subc	%0, %e1");
-#line 1154 "rl78-decode.opc"
+#line 1156 "rl78-decode.opc"
           ID(subc); DR(A); SM(HL, 0); Fzac;
 
         }
@@ -1348,7 +1350,7 @@
                      op[0]);
             }
           SYNTAX("subc	%0, %ea1");
-#line 1163 "rl78-decode.opc"
+#line 1165 "rl78-decode.opc"
           ID(subc); DR(A); SM(HL, IMMU(1)); Fzac;
 
         }
@@ -1363,7 +1365,7 @@
                      op[0]);
             }
           SYNTAX("subc	%0, %e!1");
-#line 1151 "rl78-decode.opc"
+#line 1153 "rl78-decode.opc"
           ID(subc); DR(A); SM(None, IMMU(2)); Fzac;
 
         }
@@ -1378,7 +1380,7 @@
                      op[0]);
             }
           SYNTAX("cmp	%e!0, #%1");
-#line 480 "rl78-decode.opc"
+#line 482 "rl78-decode.opc"
           ID(cmp); DM(None, IMMU(2)); SC(IMMU(1)); Fzac;
 
         }
@@ -1393,7 +1395,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, #%1");
-#line 717 "rl78-decode.opc"
+#line 719 "rl78-decode.opc"
           ID(mov); DR(ES); SC(IMMU(1));
 
         }
@@ -1408,7 +1410,7 @@
                      op[0]);
             }
           SYNTAX("cmpw	%0, %e!1");
-#line 531 "rl78-decode.opc"
+#line 533 "rl78-decode.opc"
           ID(cmp); W(); DR(AX); SM(None, IMMU(2)); Fzac;
 
         }
@@ -1418,7 +1420,7 @@
     case 0x47:
         {
           /** 0100 0ra1			cmpw	%0, %1				*/
-#line 540 "rl78-decode.opc"
+#line 542 "rl78-decode.opc"
           int ra AU = (op[0] >> 1) & 0x03;
           if (trace)
             {
@@ -1428,7 +1430,7 @@
               printf ("  ra = 0x%x\n", ra);
             }
           SYNTAX("cmpw	%0, %1");
-#line 540 "rl78-decode.opc"
+#line 542 "rl78-decode.opc"
           ID(cmp); W(); DR(AX); SRW(ra); Fzac;
 
         }
@@ -1443,7 +1445,7 @@
                      op[0]);
             }
           SYNTAX("cmpw	%0, #%1");
-#line 537 "rl78-decode.opc"
+#line 539 "rl78-decode.opc"
           ID(cmp); W(); DR(AX); SC(IMMU(2)); Fzac;
 
         }
@@ -1458,7 +1460,7 @@
                      op[0]);
             }
           SYNTAX("cmpw	%0, %1");
-#line 543 "rl78-decode.opc"
+#line 545 "rl78-decode.opc"
           ID(cmp); W(); DR(AX); SM(None, SADDR); Fzac;
 
         /*----------------------------------------------------------------------*/
@@ -1475,7 +1477,7 @@
                      op[0]);
             }
           SYNTAX("mov	%e0, %1");
-#line 735 "rl78-decode.opc"
+#line 737 "rl78-decode.opc"
           ID(mov); DM(BC, IMMU(2)); SR(A);
 
         }
@@ -1490,7 +1492,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %e1");
-#line 681 "rl78-decode.opc"
+#line 683 "rl78-decode.opc"
           ID(mov); DR(A); SM(BC, IMMU(2));
 
         }
@@ -1505,7 +1507,7 @@
                      op[0]);
             }
           SYNTAX("cmp	%0, #%1");
-#line 483 "rl78-decode.opc"
+#line 485 "rl78-decode.opc"
           ID(cmp); DM(None, SADDR); SC(IMMU(1)); Fzac;
 
         }
@@ -1520,7 +1522,7 @@
                      op[0]);
             }
           SYNTAX("cmp	%0, %1");
-#line 510 "rl78-decode.opc"
+#line 512 "rl78-decode.opc"
           ID(cmp); DR(A); SM(None, SADDR); Fzac;
 
         /*----------------------------------------------------------------------*/
@@ -1537,7 +1539,7 @@
                      op[0]);
             }
           SYNTAX("cmp	%0, #%1");
-#line 501 "rl78-decode.opc"
+#line 503 "rl78-decode.opc"
           ID(cmp); DR(A); SC(IMMU(1)); Fzac;
 
         }
@@ -1552,7 +1554,7 @@
                      op[0]);
             }
           SYNTAX("cmp	%0, %e1");
-#line 489 "rl78-decode.opc"
+#line 491 "rl78-decode.opc"
           ID(cmp); DR(A); SM(HL, 0); Fzac;
 
         }
@@ -1567,7 +1569,7 @@
                      op[0]);
             }
           SYNTAX("cmp	%0, %ea1");
-#line 498 "rl78-decode.opc"
+#line 500 "rl78-decode.opc"
           ID(cmp); DR(A); SM(HL, IMMU(1)); Fzac;
 
         }
@@ -1582,7 +1584,7 @@
                      op[0]);
             }
           SYNTAX("cmp	%0, %e!1");
-#line 486 "rl78-decode.opc"
+#line 488 "rl78-decode.opc"
           ID(cmp); DR(A); SM(None, IMMU(2)); Fzac;
 
         }
@@ -1597,7 +1599,7 @@
     case 0x57:
         {
           /** 0101 0reg			mov	%0, #%1				*/
-#line 669 "rl78-decode.opc"
+#line 671 "rl78-decode.opc"
           int reg AU = op[0] & 0x07;
           if (trace)
             {
@@ -1607,7 +1609,7 @@
               printf ("  reg = 0x%x\n", reg);
             }
           SYNTAX("mov	%0, #%1");
-#line 669 "rl78-decode.opc"
+#line 671 "rl78-decode.opc"
           ID(mov); DRB(reg); SC(IMMU(1));
 
         }
@@ -1622,7 +1624,7 @@
                      op[0]);
             }
           SYNTAX("movw	%e0, %1");
-#line 871 "rl78-decode.opc"
+#line 873 "rl78-decode.opc"
           ID(mov); W(); DM(B, IMMU(2)); SR(AX);
 
         }
@@ -1637,7 +1639,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %e1");
-#line 862 "rl78-decode.opc"
+#line 864 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SM(B, IMMU(2));
 
         }
@@ -1652,7 +1654,7 @@
                      op[0]);
             }
           SYNTAX("and	%0, #%1");
-#line 312 "rl78-decode.opc"
+#line 314 "rl78-decode.opc"
           ID(and); DM(None, SADDR); SC(IMMU(1)); Fz;
 
         /*----------------------------------------------------------------------*/
@@ -1669,7 +1671,7 @@
                      op[0]);
             }
           SYNTAX("and	%0, %1");
-#line 309 "rl78-decode.opc"
+#line 311 "rl78-decode.opc"
           ID(and); DR(A); SM(None, SADDR); Fz;
 
         }
@@ -1684,7 +1686,7 @@
                      op[0]);
             }
           SYNTAX("and	%0, #%1");
-#line 300 "rl78-decode.opc"
+#line 302 "rl78-decode.opc"
           ID(and); DR(A); SC(IMMU(1)); Fz;
 
         }
@@ -1699,7 +1701,7 @@
                      op[0]);
             }
           SYNTAX("and	%0, %e1");
-#line 288 "rl78-decode.opc"
+#line 290 "rl78-decode.opc"
           ID(and); DR(A); SM(HL, 0); Fz;
 
         }
@@ -1714,7 +1716,7 @@
                      op[0]);
             }
           SYNTAX("and	%0, %ea1");
-#line 294 "rl78-decode.opc"
+#line 296 "rl78-decode.opc"
           ID(and); DR(A); SM(HL, IMMU(1)); Fz;
 
         }
@@ -1729,7 +1731,7 @@
                      op[0]);
             }
           SYNTAX("and	%0, %e!1");
-#line 285 "rl78-decode.opc"
+#line 287 "rl78-decode.opc"
           ID(and); DR(A); SM(None, IMMU(2)); Fz;
 
         }
@@ -1743,7 +1745,7 @@
     case 0x67:
         {
           /** 0110 0rba			mov	%0, %1				*/
-#line 672 "rl78-decode.opc"
+#line 674 "rl78-decode.opc"
           int rba AU = op[0] & 0x07;
           if (trace)
             {
@@ -1753,7 +1755,7 @@
               printf ("  rba = 0x%x\n", rba);
             }
           SYNTAX("mov	%0, %1");
-#line 672 "rl78-decode.opc"
+#line 674 "rl78-decode.opc"
           ID(mov); DR(A); SRB(rba);
 
         }
@@ -1772,7 +1774,7 @@
           case 0x07:
               {
                 /** 0110 0001 0000 0reg		add	%0, %1				*/
-#line 225 "rl78-decode.opc"
+#line 227 "rl78-decode.opc"
                 int reg AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -1782,7 +1784,7 @@
                     printf ("  reg = 0x%x\n", reg);
                   }
                 SYNTAX("add	%0, %1");
-#line 225 "rl78-decode.opc"
+#line 227 "rl78-decode.opc"
                 ID(add); DRB(reg); SR(A); Fzac;
 
               }
@@ -1796,7 +1798,7 @@
           case 0x0f:
               {
                 /** 0110 0001 0000 1rba		add	%0, %1				*/
-#line 219 "rl78-decode.opc"
+#line 221 "rl78-decode.opc"
                 int rba AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -1806,7 +1808,7 @@
                     printf ("  rba = 0x%x\n", rba);
                   }
                 SYNTAX("add	%0, %1");
-#line 219 "rl78-decode.opc"
+#line 221 "rl78-decode.opc"
                 ID(add); DR(A); SRB(rba); Fzac;
 
               }
@@ -1821,7 +1823,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("addw	%0, %ea1");
-#line 268 "rl78-decode.opc"
+#line 270 "rl78-decode.opc"
                 ID(add); W(); DR(AX); SM(HL, IMMU(1)); Fzac;
 
               }
@@ -1836,7 +1838,7 @@
           case 0x17:
               {
                 /** 0110 0001 0001 0reg		addc	%0, %1				*/
-#line 254 "rl78-decode.opc"
+#line 256 "rl78-decode.opc"
                 int reg AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -1846,7 +1848,7 @@
                     printf ("  reg = 0x%x\n", reg);
                   }
                 SYNTAX("addc	%0, %1");
-#line 254 "rl78-decode.opc"
+#line 256 "rl78-decode.opc"
                 ID(addc); DRB(reg); SR(A); Fzac;
 
               }
@@ -1860,7 +1862,7 @@
           case 0x1f:
               {
                 /** 0110 0001 0001 1rba		addc	%0, %1				*/
-#line 251 "rl78-decode.opc"
+#line 253 "rl78-decode.opc"
                 int rba AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -1870,7 +1872,7 @@
                     printf ("  rba = 0x%x\n", rba);
                   }
                 SYNTAX("addc	%0, %1");
-#line 251 "rl78-decode.opc"
+#line 253 "rl78-decode.opc"
                 ID(addc); DR(A); SRB(rba); Fzac;
 
               }
@@ -1885,7 +1887,7 @@
           case 0x27:
               {
                 /** 0110 0001 0010 0reg		sub	%0, %1				*/
-#line 1143 "rl78-decode.opc"
+#line 1145 "rl78-decode.opc"
                 int reg AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -1895,7 +1897,7 @@
                     printf ("  reg = 0x%x\n", reg);
                   }
                 SYNTAX("sub	%0, %1");
-#line 1143 "rl78-decode.opc"
+#line 1145 "rl78-decode.opc"
                 ID(sub); DRB(reg); SR(A); Fzac;
 
               }
@@ -1909,7 +1911,7 @@
           case 0x2f:
               {
                 /** 0110 0001 0010 1rba		sub	%0, %1				*/
-#line 1137 "rl78-decode.opc"
+#line 1139 "rl78-decode.opc"
                 int rba AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -1919,7 +1921,7 @@
                     printf ("  rba = 0x%x\n", rba);
                   }
                 SYNTAX("sub	%0, %1");
-#line 1137 "rl78-decode.opc"
+#line 1139 "rl78-decode.opc"
                 ID(sub); DR(A); SRB(rba); Fzac;
 
               }
@@ -1934,7 +1936,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("subw	%0, %ea1");
-#line 1186 "rl78-decode.opc"
+#line 1188 "rl78-decode.opc"
                 ID(sub); W(); DR(AX); SM(HL, IMMU(1)); Fzac;
 
               }
@@ -1949,7 +1951,7 @@
           case 0x37:
               {
                 /** 0110 0001 0011 0reg		subc	%0, %1				*/
-#line 1172 "rl78-decode.opc"
+#line 1174 "rl78-decode.opc"
                 int reg AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -1959,7 +1961,7 @@
                     printf ("  reg = 0x%x\n", reg);
                   }
                 SYNTAX("subc	%0, %1");
-#line 1172 "rl78-decode.opc"
+#line 1174 "rl78-decode.opc"
                 ID(subc); DRB(reg); SR(A); Fzac;
 
               }
@@ -1973,7 +1975,7 @@
           case 0x3f:
               {
                 /** 0110 0001 0011 1rba		subc	%0, %1				*/
-#line 1169 "rl78-decode.opc"
+#line 1171 "rl78-decode.opc"
                 int rba AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -1983,7 +1985,7 @@
                     printf ("  rba = 0x%x\n", rba);
                   }
                 SYNTAX("subc	%0, %1");
-#line 1169 "rl78-decode.opc"
+#line 1171 "rl78-decode.opc"
                 ID(subc); DR(A); SRB(rba); Fzac;
 
               }
@@ -1998,7 +2000,7 @@
           case 0x47:
               {
                 /** 0110 0001 0100 0reg		cmp	%0, %1				*/
-#line 507 "rl78-decode.opc"
+#line 509 "rl78-decode.opc"
                 int reg AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -2008,7 +2010,7 @@
                     printf ("  reg = 0x%x\n", reg);
                   }
                 SYNTAX("cmp	%0, %1");
-#line 507 "rl78-decode.opc"
+#line 509 "rl78-decode.opc"
                 ID(cmp); DRB(reg); SR(A); Fzac;
 
               }
@@ -2022,7 +2024,7 @@
           case 0x4f:
               {
                 /** 0110 0001 0100 1rba		cmp	%0, %1				*/
-#line 504 "rl78-decode.opc"
+#line 506 "rl78-decode.opc"
                 int rba AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -2032,7 +2034,7 @@
                     printf ("  rba = 0x%x\n", rba);
                   }
                 SYNTAX("cmp	%0, %1");
-#line 504 "rl78-decode.opc"
+#line 506 "rl78-decode.opc"
                 ID(cmp); DR(A); SRB(rba); Fzac;
 
               }
@@ -2047,7 +2049,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("cmpw	%0, %ea1");
-#line 534 "rl78-decode.opc"
+#line 536 "rl78-decode.opc"
                 ID(cmp); W(); DR(AX); SM(HL, IMMU(1)); Fzac;
 
               }
@@ -2062,7 +2064,7 @@
           case 0x57:
               {
                 /** 0110 0001 0101 0reg		and	%0, %1				*/
-#line 306 "rl78-decode.opc"
+#line 308 "rl78-decode.opc"
                 int reg AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -2072,7 +2074,7 @@
                     printf ("  reg = 0x%x\n", reg);
                   }
                 SYNTAX("and	%0, %1");
-#line 306 "rl78-decode.opc"
+#line 308 "rl78-decode.opc"
                 ID(and); DRB(reg); SR(A); Fz;
 
               }
@@ -2086,7 +2088,7 @@
           case 0x5f:
               {
                 /** 0110 0001 0101 1rba		and	%0, %1				*/
-#line 303 "rl78-decode.opc"
+#line 305 "rl78-decode.opc"
                 int rba AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -2096,7 +2098,7 @@
                     printf ("  rba = 0x%x\n", rba);
                   }
                 SYNTAX("and	%0, %1");
-#line 303 "rl78-decode.opc"
+#line 305 "rl78-decode.opc"
                 ID(and); DR(A); SRB(rba); Fz;
 
               }
@@ -2111,7 +2113,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("inc	%ea0");
-#line 584 "rl78-decode.opc"
+#line 586 "rl78-decode.opc"
                 ID(add); DM(HL, IMMU(1)); SC(1); Fza;
 
               }
@@ -2126,7 +2128,7 @@
           case 0x67:
               {
                 /** 0110 0001 0110 0reg		or	%0, %1				*/
-#line 961 "rl78-decode.opc"
+#line 963 "rl78-decode.opc"
                 int reg AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -2136,7 +2138,7 @@
                     printf ("  reg = 0x%x\n", reg);
                   }
                 SYNTAX("or	%0, %1");
-#line 961 "rl78-decode.opc"
+#line 963 "rl78-decode.opc"
                 ID(or); DRB(reg); SR(A); Fz;
 
               }
@@ -2150,7 +2152,7 @@
           case 0x6f:
               {
                 /** 0110 0001 0110 1rba		or	%0, %1				*/
-#line 958 "rl78-decode.opc"
+#line 960 "rl78-decode.opc"
                 int rba AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -2160,7 +2162,7 @@
                     printf ("  rba = 0x%x\n", rba);
                   }
                 SYNTAX("or	%0, %1");
-#line 958 "rl78-decode.opc"
+#line 960 "rl78-decode.opc"
                 ID(or); DR(A); SRB(rba); Fz;
 
               }
@@ -2175,7 +2177,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("dec	%ea0");
-#line 551 "rl78-decode.opc"
+#line 553 "rl78-decode.opc"
                 ID(sub); DM(HL, IMMU(1)); SC(1); Fza;
 
               }
@@ -2190,7 +2192,7 @@
           case 0x77:
               {
                 /** 0110 0001 0111 0reg		xor	%0, %1				*/
-#line 1265 "rl78-decode.opc"
+#line 1267 "rl78-decode.opc"
                 int reg AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -2200,7 +2202,7 @@
                     printf ("  reg = 0x%x\n", reg);
                   }
                 SYNTAX("xor	%0, %1");
-#line 1265 "rl78-decode.opc"
+#line 1267 "rl78-decode.opc"
                 ID(xor); DRB(reg); SR(A); Fz;
 
               }
@@ -2214,7 +2216,7 @@
           case 0x7f:
               {
                 /** 0110 0001 0111 1rba		xor	%0, %1				*/
-#line 1262 "rl78-decode.opc"
+#line 1264 "rl78-decode.opc"
                 int rba AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -2224,7 +2226,7 @@
                     printf ("  rba = 0x%x\n", rba);
                   }
                 SYNTAX("xor	%0, %1");
-#line 1262 "rl78-decode.opc"
+#line 1264 "rl78-decode.opc"
                 ID(xor); DR(A); SRB(rba); Fz;
 
               }
@@ -2239,7 +2241,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("incw	%ea0");
-#line 598 "rl78-decode.opc"
+#line 600 "rl78-decode.opc"
                 ID(add); W(); DM(HL, IMMU(1)); SC(1);
 
               }
@@ -2255,7 +2257,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("add	%0, %e1");
-#line 207 "rl78-decode.opc"
+#line 209 "rl78-decode.opc"
                 ID(add); DR(A); SM2(HL, B, 0); Fzac;
 
               }
@@ -2270,7 +2272,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("add	%0, %e1");
-#line 213 "rl78-decode.opc"
+#line 215 "rl78-decode.opc"
                 ID(add); DR(A); SM2(HL, C, 0); Fzac;
 
               }
@@ -2309,9 +2311,9 @@
           case 0xf7:
               {
                 /** 0110 0001 1nnn 01mm		callt	[%x0]				*/
-#line 433 "rl78-decode.opc"
+#line 435 "rl78-decode.opc"
                 int nnn AU = (op[1] >> 4) & 0x07;
-#line 433 "rl78-decode.opc"
+#line 435 "rl78-decode.opc"
                 int mm AU = op[1] & 0x03;
                 if (trace)
                   {
@@ -2322,7 +2324,7 @@
                     printf ("  mm = 0x%x\n", mm);
                   }
                 SYNTAX("callt	[%x0]");
-#line 433 "rl78-decode.opc"
+#line 435 "rl78-decode.opc"
                 ID(call); DM(None, 0x80 + mm*16 + nnn*2);
 
               /*----------------------------------------------------------------------*/
@@ -2338,7 +2340,7 @@
           case 0x8f:
               {
                 /** 0110 0001 1000 1reg		xch	%0, %1				*/
-#line 1224 "rl78-decode.opc"
+#line 1226 "rl78-decode.opc"
                 int reg AU = op[1] & 0x07;
                 if (trace)
                   {
@@ -2348,7 +2350,7 @@
                     printf ("  reg = 0x%x\n", reg);
                   }
                 SYNTAX("xch	%0, %1");
-#line 1224 "rl78-decode.opc"
+#line 1226 "rl78-decode.opc"
                 /* Note: DECW uses reg == X, so this must follow DECW */
                 ID(xch); DR(A); SRB(reg);
 
@@ -2364,7 +2366,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("decw	%ea0");
-#line 565 "rl78-decode.opc"
+#line 567 "rl78-decode.opc"
                 ID(sub); W(); DM(HL, IMMU(1)); SC(1);
 
               }
@@ -2379,7 +2381,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("addc	%0, %e1");
-#line 239 "rl78-decode.opc"
+#line 241 "rl78-decode.opc"
                 ID(addc); DR(A); SM2(HL, B, 0); Fzac;
 
               }
@@ -2394,7 +2396,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("addc	%0, %e1");
-#line 242 "rl78-decode.opc"
+#line 244 "rl78-decode.opc"
                 ID(addc); DR(A); SM2(HL, C, 0); Fzac;
 
               }
@@ -2410,7 +2412,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("sub	%0, %e1");
-#line 1125 "rl78-decode.opc"
+#line 1127 "rl78-decode.opc"
                 ID(sub); DR(A); SM2(HL, B, 0); Fzac;
 
               }
@@ -2425,7 +2427,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("sub	%0, %e1");
-#line 1131 "rl78-decode.opc"
+#line 1133 "rl78-decode.opc"
                 ID(sub); DR(A); SM2(HL, C, 0); Fzac;
 
               }
@@ -2440,7 +2442,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("xch	%0, %1");
-#line 1228 "rl78-decode.opc"
+#line 1230 "rl78-decode.opc"
                 ID(xch); DR(A); SM(None, SADDR);
 
               }
@@ -2455,7 +2457,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("xch	%0, %e1");
-#line 1221 "rl78-decode.opc"
+#line 1223 "rl78-decode.opc"
                 ID(xch); DR(A); SM2(HL, C, 0);
 
               }
@@ -2470,7 +2472,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("xch	%0, %e!1");
-#line 1203 "rl78-decode.opc"
+#line 1205 "rl78-decode.opc"
                 ID(xch); DR(A); SM(None, IMMU(2));
 
               }
@@ -2485,7 +2487,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("xch	%0, %s1");
-#line 1231 "rl78-decode.opc"
+#line 1233 "rl78-decode.opc"
                 ID(xch); DR(A); SM(None, SFR);
 
               }
@@ -2500,7 +2502,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("xch	%0, %e1");
-#line 1212 "rl78-decode.opc"
+#line 1214 "rl78-decode.opc"
                 ID(xch); DR(A); SM(HL, 0);
 
               }
@@ -2515,7 +2517,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("xch	%0, %ea1");
-#line 1218 "rl78-decode.opc"
+#line 1220 "rl78-decode.opc"
                 ID(xch); DR(A); SM(HL, IMMU(1));
 
               }
@@ -2530,7 +2532,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("xch	%0, %e1");
-#line 1206 "rl78-decode.opc"
+#line 1208 "rl78-decode.opc"
                 ID(xch); DR(A); SM(DE, 0);
 
               }
@@ -2545,7 +2547,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("xch	%0, %ea1");
-#line 1209 "rl78-decode.opc"
+#line 1211 "rl78-decode.opc"
                 ID(xch); DR(A); SM(DE, IMMU(1));
 
               }
@@ -2560,7 +2562,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("subc	%0, %e1");
-#line 1157 "rl78-decode.opc"
+#line 1159 "rl78-decode.opc"
                 ID(subc); DR(A); SM2(HL, B, 0); Fzac;
 
               }
@@ -2575,7 +2577,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("subc	%0, %e1");
-#line 1160 "rl78-decode.opc"
+#line 1162 "rl78-decode.opc"
                 ID(subc); DR(A); SM2(HL, C, 0); Fzac;
 
               }
@@ -2590,7 +2592,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("mov	%0, %1");
-#line 723 "rl78-decode.opc"
+#line 725 "rl78-decode.opc"
                 ID(mov); DR(ES); SM(None, SADDR);
 
               }
@@ -2605,7 +2607,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("xch	%0, %e1");
-#line 1215 "rl78-decode.opc"
+#line 1217 "rl78-decode.opc"
                 ID(xch); DR(A); SM2(HL, B, 0);
 
               }
@@ -2620,7 +2622,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("cmp	%0, %e1");
-#line 492 "rl78-decode.opc"
+#line 494 "rl78-decode.opc"
                 ID(cmp); DR(A); SM2(HL, B, 0); Fzac;
 
               }
@@ -2635,7 +2637,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("cmp	%0, %e1");
-#line 495 "rl78-decode.opc"
+#line 497 "rl78-decode.opc"
                 ID(cmp); DR(A); SM2(HL, C, 0); Fzac;
 
               }
@@ -2650,7 +2652,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("bh	$%a0");
-#line 340 "rl78-decode.opc"
+#line 342 "rl78-decode.opc"
                 ID(branch_cond); DC(pc+IMMS(1)+3); SR(None); COND(H);
 
               }
@@ -2665,7 +2667,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("sk%c1");
-#line 1094 "rl78-decode.opc"
+#line 1096 "rl78-decode.opc"
                 ID(skip); COND(C);
 
               }
@@ -2680,7 +2682,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("mov	%0, %e1");
-#line 660 "rl78-decode.opc"
+#line 662 "rl78-decode.opc"
                 ID(mov); DR(A); SM2(HL, B, 0);
 
               }
@@ -2691,7 +2693,7 @@
           case 0xfa:
               {
                 /** 0110 0001 11rg 1010		call	%0				*/
-#line 430 "rl78-decode.opc"
+#line 432 "rl78-decode.opc"
                 int rg AU = (op[1] >> 4) & 0x03;
                 if (trace)
                   {
@@ -2701,7 +2703,7 @@
                     printf ("  rg = 0x%x\n", rg);
                   }
                 SYNTAX("call	%0");
-#line 430 "rl78-decode.opc"
+#line 432 "rl78-decode.opc"
                 ID(call); DRW(rg);
 
               }
@@ -2716,7 +2718,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("br	ax");
-#line 380 "rl78-decode.opc"
+#line 382 "rl78-decode.opc"
                 ID(branch); DR(AX);
 
               /*----------------------------------------------------------------------*/
@@ -2733,7 +2735,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("brk");
-#line 388 "rl78-decode.opc"
+#line 390 "rl78-decode.opc"
                 ID(break);
 
               /*----------------------------------------------------------------------*/
@@ -2750,7 +2752,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("pop	%s0");
-#line 989 "rl78-decode.opc"
+#line 991 "rl78-decode.opc"
                 ID(mov); W(); DR(PSW); SPOP();
 
               /*----------------------------------------------------------------------*/
@@ -2767,7 +2769,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("movs	%ea0, %1");
-#line 811 "rl78-decode.opc"
+#line 813 "rl78-decode.opc"
                 ID(mov); DM(HL, IMMU(1)); SR(X); Fzc;
 
               /*----------------------------------------------------------------------*/
@@ -2780,7 +2782,7 @@
           case 0xff:
               {
                 /** 0110 0001 11rb 1111		sel	rb%1				*/
-#line 1041 "rl78-decode.opc"
+#line 1043 "rl78-decode.opc"
                 int rb AU = (op[1] >> 4) & 0x03;
                 if (trace)
                   {
@@ -2790,7 +2792,7 @@
                     printf ("  rb = 0x%x\n", rb);
                   }
                 SYNTAX("sel	rb%1");
-#line 1041 "rl78-decode.opc"
+#line 1043 "rl78-decode.opc"
                 ID(sel); SC(rb);
 
               /*----------------------------------------------------------------------*/
@@ -2807,7 +2809,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("and	%0, %e1");
-#line 291 "rl78-decode.opc"
+#line 293 "rl78-decode.opc"
                 ID(and); DR(A); SM2(HL, B, 0); Fz;
 
               }
@@ -2822,7 +2824,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("and	%0, %e1");
-#line 297 "rl78-decode.opc"
+#line 299 "rl78-decode.opc"
                 ID(and); DR(A); SM2(HL, C, 0); Fz;
 
               }
@@ -2837,7 +2839,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("bnh	$%a0");
-#line 343 "rl78-decode.opc"
+#line 345 "rl78-decode.opc"
                 ID(branch_cond); DC(pc+IMMS(1)+3); SR(None); COND(NH);
 
               }
@@ -2852,7 +2854,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("sk%c1");
-#line 1100 "rl78-decode.opc"
+#line 1102 "rl78-decode.opc"
                 ID(skip); COND(NC);
 
               }
@@ -2867,7 +2869,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("mov	%e0, %1");
-#line 627 "rl78-decode.opc"
+#line 629 "rl78-decode.opc"
                 ID(mov); DM2(HL, B, 0); SR(A);
 
               }
@@ -2882,7 +2884,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("ror	%0, %1");
-#line 1022 "rl78-decode.opc"
+#line 1024 "rl78-decode.opc"
                 ID(ror); DR(A); SC(1);
 
               }
@@ -2897,7 +2899,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("rolc	%0, %1");
-#line 1016 "rl78-decode.opc"
+#line 1018 "rl78-decode.opc"
                 ID(rolc); DR(A); SC(1);
 
               }
@@ -2912,7 +2914,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("push	%s1");
-#line 997 "rl78-decode.opc"
+#line 999 "rl78-decode.opc"
                 ID(mov); W(); DPUSH(); SR(PSW);
 
               /*----------------------------------------------------------------------*/
@@ -2929,7 +2931,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("cmps	%0, %ea1");
-#line 526 "rl78-decode.opc"
+#line 528 "rl78-decode.opc"
                 ID(cmp); DR(X); SM(HL, IMMU(1)); Fzac;
 
               /*----------------------------------------------------------------------*/
@@ -2946,7 +2948,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("or	%0, %e1");
-#line 946 "rl78-decode.opc"
+#line 948 "rl78-decode.opc"
                 ID(or); DR(A); SM2(HL, B, 0); Fz;
 
               }
@@ -2961,7 +2963,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("or	%0, %e1");
-#line 952 "rl78-decode.opc"
+#line 954 "rl78-decode.opc"
                 ID(or); DR(A); SM2(HL, C, 0); Fz;
 
               }
@@ -2976,7 +2978,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("sk%c1");
-#line 1097 "rl78-decode.opc"
+#line 1099 "rl78-decode.opc"
                 ID(skip); COND(H);
 
               }
@@ -2991,7 +2993,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("sk%c1");
-#line 1109 "rl78-decode.opc"
+#line 1111 "rl78-decode.opc"
                 ID(skip); COND(Z);
 
               /*----------------------------------------------------------------------*/
@@ -3008,7 +3010,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("mov	%0, %e1");
-#line 663 "rl78-decode.opc"
+#line 665 "rl78-decode.opc"
                 ID(mov); DR(A); SM2(HL, C, 0);
 
               }
@@ -3023,7 +3025,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("rol	%0, %1");
-#line 1013 "rl78-decode.opc"
+#line 1015 "rl78-decode.opc"
                 ID(rol); DR(A); SC(1);
 
               }
@@ -3038,7 +3040,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("retb");
-#line 1008 "rl78-decode.opc"
+#line 1010 "rl78-decode.opc"
                 ID(reti);
 
               /*----------------------------------------------------------------------*/
@@ -3055,7 +3057,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("halt");
-#line 576 "rl78-decode.opc"
+#line 578 "rl78-decode.opc"
                 ID(halt);
 
               /*----------------------------------------------------------------------*/
@@ -3066,7 +3068,7 @@
           case 0xfe:
               {
                 /** 0110 0001 111r 1110		rolwc	%0, %1				*/
-#line 1019 "rl78-decode.opc"
+#line 1021 "rl78-decode.opc"
                 int r AU = (op[1] >> 4) & 0x01;
                 if (trace)
                   {
@@ -3076,7 +3078,7 @@
                     printf ("  r = 0x%x\n", r);
                   }
                 SYNTAX("rolwc	%0, %1");
-#line 1019 "rl78-decode.opc"
+#line 1021 "rl78-decode.opc"
                 ID(rolc); W(); DRW(r); SC(1);
 
               }
@@ -3091,7 +3093,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("xor	%0, %e1");
-#line 1250 "rl78-decode.opc"
+#line 1252 "rl78-decode.opc"
                 ID(xor); DR(A); SM2(HL, B, 0); Fz;
 
               }
@@ -3106,7 +3108,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("xor	%0, %e1");
-#line 1256 "rl78-decode.opc"
+#line 1258 "rl78-decode.opc"
                 ID(xor); DR(A); SM2(HL, C, 0); Fz;
 
               }
@@ -3121,7 +3123,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("sk%c1");
-#line 1103 "rl78-decode.opc"
+#line 1105 "rl78-decode.opc"
                 ID(skip); COND(NH);
 
               }
@@ -3136,7 +3138,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("sk%c1");
-#line 1106 "rl78-decode.opc"
+#line 1108 "rl78-decode.opc"
                 ID(skip); COND(NZ);
 
               }
@@ -3151,7 +3153,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("mov	%e0, %1");
-#line 636 "rl78-decode.opc"
+#line 638 "rl78-decode.opc"
                 ID(mov); DM2(HL, C, 0); SR(A);
 
               }
@@ -3166,7 +3168,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("rorc	%0, %1");
-#line 1025 "rl78-decode.opc"
+#line 1027 "rl78-decode.opc"
                 ID(rorc); DR(A); SC(1);
 
               /*----------------------------------------------------------------------*/
@@ -3186,7 +3188,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("reti");
-#line 1005 "rl78-decode.opc"
+#line 1007 "rl78-decode.opc"
                 ID(reti);
 
               }
@@ -3201,7 +3203,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("stop");
-#line 1114 "rl78-decode.opc"
+#line 1116 "rl78-decode.opc"
                 ID(stop);
 
               /*----------------------------------------------------------------------*/
@@ -3221,7 +3223,7 @@
                      op[0]);
             }
           SYNTAX("movw	%e0, %1");
-#line 874 "rl78-decode.opc"
+#line 876 "rl78-decode.opc"
           ID(mov); W(); DM(C, IMMU(2)); SR(AX);
 
         }
@@ -3236,7 +3238,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %e1");
-#line 865 "rl78-decode.opc"
+#line 867 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SM(C, IMMU(2));
 
         }
@@ -3251,7 +3253,7 @@
                      op[0]);
             }
           SYNTAX("or	%0, #%1");
-#line 967 "rl78-decode.opc"
+#line 969 "rl78-decode.opc"
           ID(or); DM(None, SADDR); SC(IMMU(1)); Fz;
 
         /*----------------------------------------------------------------------*/
@@ -3268,7 +3270,7 @@
                      op[0]);
             }
           SYNTAX("or	%0, %1");
-#line 964 "rl78-decode.opc"
+#line 966 "rl78-decode.opc"
           ID(or); DR(A); SM(None, SADDR); Fz;
 
         }
@@ -3283,7 +3285,7 @@
                      op[0]);
             }
           SYNTAX("or	%0, #%1");
-#line 955 "rl78-decode.opc"
+#line 957 "rl78-decode.opc"
           ID(or); DR(A); SC(IMMU(1)); Fz;
 
         }
@@ -3298,7 +3300,7 @@
                      op[0]);
             }
           SYNTAX("or	%0, %e1");
-#line 943 "rl78-decode.opc"
+#line 945 "rl78-decode.opc"
           ID(or); DR(A); SM(HL, 0); Fz;
 
         }
@@ -3313,7 +3315,7 @@
                      op[0]);
             }
           SYNTAX("or	%0, %ea1");
-#line 949 "rl78-decode.opc"
+#line 951 "rl78-decode.opc"
           ID(or); DR(A); SM(HL, IMMU(1)); Fz;
 
         }
@@ -3328,7 +3330,7 @@
                      op[0]);
             }
           SYNTAX("or	%0, %e!1");
-#line 940 "rl78-decode.opc"
+#line 942 "rl78-decode.opc"
           ID(or); DR(A); SM(None, IMMU(2)); Fz;
 
         }
@@ -3342,7 +3344,7 @@
     case 0x77:
         {
           /** 0111 0rba			mov	%0, %1				*/
-#line 696 "rl78-decode.opc"
+#line 698 "rl78-decode.opc"
           int rba AU = op[0] & 0x07;
           if (trace)
             {
@@ -3352,7 +3354,7 @@
               printf ("  rba = 0x%x\n", rba);
             }
           SYNTAX("mov	%0, %1");
-#line 696 "rl78-decode.opc"
+#line 698 "rl78-decode.opc"
           ID(mov); DRB(rba); SR(A);
 
         }
@@ -3371,7 +3373,7 @@
           case 0x70:
               {
                 /** 0111 0001 0bit 0000		set1	%e!0				*/
-#line 1046 "rl78-decode.opc"
+#line 1048 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3381,7 +3383,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("set1	%e!0");
-#line 1046 "rl78-decode.opc"
+#line 1048 "rl78-decode.opc"
                 ID(mov); DM(None, IMMU(2)); DB(bit); SC(1);
 
               }
@@ -3396,7 +3398,7 @@
           case 0x71:
               {
                 /** 0111 0001 0bit 0001		mov1	%0, cy				*/
-#line 803 "rl78-decode.opc"
+#line 805 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3406,7 +3408,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("mov1	%0, cy");
-#line 803 "rl78-decode.opc"
+#line 805 "rl78-decode.opc"
                 ID(mov); DM(None, SADDR); DB(bit); SCY();
 
               }
@@ -3421,7 +3423,7 @@
           case 0x72:
               {
                 /** 0111 0001 0bit 0010		set1	%0				*/
-#line 1064 "rl78-decode.opc"
+#line 1066 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3431,7 +3433,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("set1	%0");
-#line 1064 "rl78-decode.opc"
+#line 1066 "rl78-decode.opc"
                 ID(mov); DM(None, SADDR); DB(bit); SC(1);
 
               /*----------------------------------------------------------------------*/
@@ -3448,7 +3450,7 @@
           case 0x73:
               {
                 /** 0111 0001 0bit 0011		clr1	%0				*/
-#line 456 "rl78-decode.opc"
+#line 458 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3458,7 +3460,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("clr1	%0");
-#line 456 "rl78-decode.opc"
+#line 458 "rl78-decode.opc"
                 ID(mov); DM(None, SADDR); DB(bit); SC(0);
 
               /*----------------------------------------------------------------------*/
@@ -3475,7 +3477,7 @@
           case 0x74:
               {
                 /** 0111 0001 0bit 0100		mov1	cy, %1				*/
-#line 797 "rl78-decode.opc"
+#line 799 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3485,7 +3487,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("mov1	cy, %1");
-#line 797 "rl78-decode.opc"
+#line 799 "rl78-decode.opc"
                 ID(mov); DCY(); SM(None, SADDR); SB(bit);
 
               }
@@ -3500,7 +3502,7 @@
           case 0x75:
               {
                 /** 0111 0001 0bit 0101		and1	cy, %s1				*/
-#line 326 "rl78-decode.opc"
+#line 328 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3510,7 +3512,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("and1	cy, %s1");
-#line 326 "rl78-decode.opc"
+#line 328 "rl78-decode.opc"
                 ID(and); DCY(); SM(None, SADDR); SB(bit);
 
               /*----------------------------------------------------------------------*/
@@ -3530,7 +3532,7 @@
           case 0x76:
               {
                 /** 0111 0001 0bit 0110		or1	cy, %s1				*/
-#line 981 "rl78-decode.opc"
+#line 983 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3540,7 +3542,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("or1	cy, %s1");
-#line 981 "rl78-decode.opc"
+#line 983 "rl78-decode.opc"
                 ID(or); DCY(); SM(None, SADDR); SB(bit);
 
               /*----------------------------------------------------------------------*/
@@ -3557,7 +3559,7 @@
           case 0x77:
               {
                 /** 0111 0001 0bit 0111		xor1	cy, %s1				*/
-#line 1285 "rl78-decode.opc"
+#line 1287 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3567,7 +3569,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("xor1	cy, %s1");
-#line 1285 "rl78-decode.opc"
+#line 1287 "rl78-decode.opc"
                 ID(xor); DCY(); SM(None, SADDR); SB(bit);
 
               /*----------------------------------------------------------------------*/
@@ -3584,7 +3586,7 @@
           case 0x78:
               {
                 /** 0111 0001 0bit 1000		clr1	%e!0				*/
-#line 438 "rl78-decode.opc"
+#line 440 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3594,7 +3596,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("clr1	%e!0");
-#line 438 "rl78-decode.opc"
+#line 440 "rl78-decode.opc"
                 ID(mov); DM(None, IMMU(2)); DB(bit); SC(0);
 
               }
@@ -3609,7 +3611,7 @@
           case 0x79:
               {
                 /** 0111 0001 0bit 1001		mov1	%s0, cy				*/
-#line 806 "rl78-decode.opc"
+#line 808 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3619,7 +3621,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("mov1	%s0, cy");
-#line 806 "rl78-decode.opc"
+#line 808 "rl78-decode.opc"
                 ID(mov); DM(None, SFR); DB(bit); SCY();
 
               /*----------------------------------------------------------------------*/
@@ -3636,7 +3638,7 @@
           case 0x7a:
               {
                 /** 0111 0001 0bit 1010		set1	%s0				*/
-#line 1058 "rl78-decode.opc"
+#line 1060 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3646,7 +3648,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("set1	%s0");
-#line 1058 "rl78-decode.opc"
+#line 1060 "rl78-decode.opc"
                 op0 = SFR;
                 ID(mov); DM(None, op0); DB(bit); SC(1);
                 if (op0 == RL78_SFR_PSW && bit == 7)
@@ -3664,7 +3666,7 @@
           case 0x7b:
               {
                 /** 0111 0001 0bit 1011		clr1	%s0				*/
-#line 450 "rl78-decode.opc"
+#line 452 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3674,7 +3676,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("clr1	%s0");
-#line 450 "rl78-decode.opc"
+#line 452 "rl78-decode.opc"
                 op0 = SFR;
                 ID(mov); DM(None, op0); DB(bit); SC(0);
                 if (op0 == RL78_SFR_PSW && bit == 7)
@@ -3692,7 +3694,7 @@
           case 0x7c:
               {
                 /** 0111 0001 0bit 1100		mov1	cy, %s1				*/
-#line 800 "rl78-decode.opc"
+#line 802 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3702,7 +3704,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("mov1	cy, %s1");
-#line 800 "rl78-decode.opc"
+#line 802 "rl78-decode.opc"
                 ID(mov); DCY(); SM(None, SFR); SB(bit);
 
               }
@@ -3717,7 +3719,7 @@
           case 0x7d:
               {
                 /** 0111 0001 0bit 1101		and1	cy, %s1				*/
-#line 323 "rl78-decode.opc"
+#line 325 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3727,7 +3729,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("and1	cy, %s1");
-#line 323 "rl78-decode.opc"
+#line 325 "rl78-decode.opc"
                 ID(and); DCY(); SM(None, SFR); SB(bit);
 
               }
@@ -3742,7 +3744,7 @@
           case 0x7e:
               {
                 /** 0111 0001 0bit 1110		or1	cy, %s1				*/
-#line 978 "rl78-decode.opc"
+#line 980 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3752,7 +3754,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("or1	cy, %s1");
-#line 978 "rl78-decode.opc"
+#line 980 "rl78-decode.opc"
                 ID(or); DCY(); SM(None, SFR); SB(bit);
 
               }
@@ -3767,7 +3769,7 @@
           case 0x7f:
               {
                 /** 0111 0001 0bit 1111		xor1	cy, %s1				*/
-#line 1282 "rl78-decode.opc"
+#line 1284 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3777,7 +3779,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("xor1	cy, %s1");
-#line 1282 "rl78-decode.opc"
+#line 1284 "rl78-decode.opc"
                 ID(xor); DCY(); SM(None, SFR); SB(bit);
 
               }
@@ -3792,7 +3794,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("set1	cy");
-#line 1055 "rl78-decode.opc"
+#line 1057 "rl78-decode.opc"
                 ID(mov); DCY(); SC(1);
 
               }
@@ -3807,7 +3809,7 @@
           case 0xf1:
               {
                 /** 0111 0001 1bit 0001		mov1	%e0, cy				*/
-#line 785 "rl78-decode.opc"
+#line 787 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3817,7 +3819,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("mov1	%e0, cy");
-#line 785 "rl78-decode.opc"
+#line 787 "rl78-decode.opc"
                 ID(mov); DM(HL, 0); DB(bit); SCY();
 
               }
@@ -3832,7 +3834,7 @@
           case 0xf2:
               {
                 /** 0111 0001 1bit 0010		set1	%e0				*/
-#line 1049 "rl78-decode.opc"
+#line 1051 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3842,7 +3844,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("set1	%e0");
-#line 1049 "rl78-decode.opc"
+#line 1051 "rl78-decode.opc"
                 ID(mov); DM(HL, 0); DB(bit); SC(1);
 
               }
@@ -3857,7 +3859,7 @@
           case 0xf3:
               {
                 /** 0111 0001 1bit 0011		clr1	%e0				*/
-#line 441 "rl78-decode.opc"
+#line 443 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3867,7 +3869,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("clr1	%e0");
-#line 441 "rl78-decode.opc"
+#line 443 "rl78-decode.opc"
                 ID(mov); DM(HL, 0); DB(bit); SC(0);
 
               }
@@ -3882,7 +3884,7 @@
           case 0xf4:
               {
                 /** 0111 0001 1bit 0100		mov1	cy, %e1				*/
-#line 791 "rl78-decode.opc"
+#line 793 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3892,7 +3894,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("mov1	cy, %e1");
-#line 791 "rl78-decode.opc"
+#line 793 "rl78-decode.opc"
                 ID(mov); DCY(); SM(HL, 0); SB(bit);
 
               }
@@ -3907,7 +3909,7 @@
           case 0xf5:
               {
                 /** 0111 0001 1bit 0101		and1	cy, %e1			*/
-#line 317 "rl78-decode.opc"
+#line 319 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3917,7 +3919,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("and1	cy, %e1");
-#line 317 "rl78-decode.opc"
+#line 319 "rl78-decode.opc"
                 ID(and); DCY(); SM(HL, 0); SB(bit);
 
               }
@@ -3932,7 +3934,7 @@
           case 0xf6:
               {
                 /** 0111 0001 1bit 0110		or1	cy, %e1				*/
-#line 972 "rl78-decode.opc"
+#line 974 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3942,7 +3944,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("or1	cy, %e1");
-#line 972 "rl78-decode.opc"
+#line 974 "rl78-decode.opc"
                 ID(or); DCY(); SM(HL, 0); SB(bit);
 
               }
@@ -3957,7 +3959,7 @@
           case 0xf7:
               {
                 /** 0111 0001 1bit 0111		xor1	cy, %e1				*/
-#line 1276 "rl78-decode.opc"
+#line 1278 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -3967,7 +3969,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("xor1	cy, %e1");
-#line 1276 "rl78-decode.opc"
+#line 1278 "rl78-decode.opc"
                 ID(xor); DCY(); SM(HL, 0); SB(bit);
 
               }
@@ -3982,7 +3984,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("clr1	cy");
-#line 447 "rl78-decode.opc"
+#line 449 "rl78-decode.opc"
                 ID(mov); DCY(); SC(0);
 
               }
@@ -3997,7 +3999,7 @@
           case 0xf9:
               {
                 /** 0111 0001 1bit 1001		mov1	%e0, cy				*/
-#line 788 "rl78-decode.opc"
+#line 790 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -4007,7 +4009,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("mov1	%e0, cy");
-#line 788 "rl78-decode.opc"
+#line 790 "rl78-decode.opc"
                 ID(mov); DR(A); DB(bit); SCY();
 
               }
@@ -4022,7 +4024,7 @@
           case 0xfa:
               {
                 /** 0111 0001 1bit 1010		set1	%0				*/
-#line 1052 "rl78-decode.opc"
+#line 1054 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -4032,7 +4034,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("set1	%0");
-#line 1052 "rl78-decode.opc"
+#line 1054 "rl78-decode.opc"
                 ID(mov); DR(A); DB(bit); SC(1);
 
               }
@@ -4047,7 +4049,7 @@
           case 0xfb:
               {
                 /** 0111 0001 1bit 1011		clr1	%0				*/
-#line 444 "rl78-decode.opc"
+#line 446 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -4057,7 +4059,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("clr1	%0");
-#line 444 "rl78-decode.opc"
+#line 446 "rl78-decode.opc"
                 ID(mov); DR(A); DB(bit); SC(0);
 
               }
@@ -4072,7 +4074,7 @@
           case 0xfc:
               {
                 /** 0111 0001 1bit 1100		mov1	cy, %e1				*/
-#line 794 "rl78-decode.opc"
+#line 796 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -4082,7 +4084,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("mov1	cy, %e1");
-#line 794 "rl78-decode.opc"
+#line 796 "rl78-decode.opc"
                 ID(mov); DCY(); SR(A); SB(bit);
 
               }
@@ -4097,7 +4099,7 @@
           case 0xfd:
               {
                 /** 0111 0001 1bit 1101		and1	cy, %1				*/
-#line 320 "rl78-decode.opc"
+#line 322 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -4107,7 +4109,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("and1	cy, %1");
-#line 320 "rl78-decode.opc"
+#line 322 "rl78-decode.opc"
                 ID(and); DCY(); SR(A); SB(bit);
 
               }
@@ -4122,7 +4124,7 @@
           case 0xfe:
               {
                 /** 0111 0001 1bit 1110		or1	cy, %1				*/
-#line 975 "rl78-decode.opc"
+#line 977 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -4132,7 +4134,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("or1	cy, %1");
-#line 975 "rl78-decode.opc"
+#line 977 "rl78-decode.opc"
                 ID(or); DCY(); SR(A); SB(bit);
 
               }
@@ -4147,7 +4149,7 @@
           case 0xff:
               {
                 /** 0111 0001 1bit 1111		xor1	cy, %1				*/
-#line 1279 "rl78-decode.opc"
+#line 1281 "rl78-decode.opc"
                 int bit AU = (op[1] >> 4) & 0x07;
                 if (trace)
                   {
@@ -4157,7 +4159,7 @@
                     printf ("  bit = 0x%x\n", bit);
                   }
                 SYNTAX("xor1	cy, %1");
-#line 1279 "rl78-decode.opc"
+#line 1281 "rl78-decode.opc"
                 ID(xor); DCY(); SR(A); SB(bit);
 
               }
@@ -4172,7 +4174,7 @@
                            op[0], op[1]);
                   }
                 SYNTAX("not1	cy");
-#line 916 "rl78-decode.opc"
+#line 918 "rl78-decode.opc"
                 ID(xor); DCY(); SC(1);
 
               /*----------------------------------------------------------------------*/
@@ -4192,7 +4194,7 @@
                      op[0]);
             }
           SYNTAX("movw	%e0, %1");
-#line 877 "rl78-decode.opc"
+#line 879 "rl78-decode.opc"
           ID(mov); W(); DM(BC, IMMU(2)); SR(AX);
 
         }
@@ -4207,7 +4209,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %e1");
-#line 868 "rl78-decode.opc"
+#line 870 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SM(BC, IMMU(2));
 
         }
@@ -4222,7 +4224,7 @@
                      op[0]);
             }
           SYNTAX("xor	%0, #%1");
-#line 1271 "rl78-decode.opc"
+#line 1273 "rl78-decode.opc"
           ID(xor); DM(None, SADDR); SC(IMMU(1)); Fz;
 
         /*----------------------------------------------------------------------*/
@@ -4239,7 +4241,7 @@
                      op[0]);
             }
           SYNTAX("xor	%0, %1");
-#line 1268 "rl78-decode.opc"
+#line 1270 "rl78-decode.opc"
           ID(xor); DR(A); SM(None, SADDR); Fz;
 
         }
@@ -4254,7 +4256,7 @@
                      op[0]);
             }
           SYNTAX("xor	%0, #%1");
-#line 1259 "rl78-decode.opc"
+#line 1261 "rl78-decode.opc"
           ID(xor); DR(A); SC(IMMU(1)); Fz;
 
         }
@@ -4269,7 +4271,7 @@
                      op[0]);
             }
           SYNTAX("xor	%0, %e1");
-#line 1247 "rl78-decode.opc"
+#line 1249 "rl78-decode.opc"
           ID(xor); DR(A); SM(HL, 0); Fz;
 
         }
@@ -4284,7 +4286,7 @@
                      op[0]);
             }
           SYNTAX("xor	%0, %ea1");
-#line 1253 "rl78-decode.opc"
+#line 1255 "rl78-decode.opc"
           ID(xor); DR(A); SM(HL, IMMU(1)); Fz;
 
         }
@@ -4299,7 +4301,7 @@
                      op[0]);
             }
           SYNTAX("xor	%0, %e!1");
-#line 1244 "rl78-decode.opc"
+#line 1246 "rl78-decode.opc"
           ID(xor); DR(A); SM(None, IMMU(2)); Fz;
 
         }
@@ -4314,7 +4316,7 @@
     case 0x87:
         {
           /** 1000 0reg			inc	%0				*/
-#line 587 "rl78-decode.opc"
+#line 589 "rl78-decode.opc"
           int reg AU = op[0] & 0x07;
           if (trace)
             {
@@ -4324,7 +4326,7 @@
               printf ("  reg = 0x%x\n", reg);
             }
           SYNTAX("inc	%0");
-#line 587 "rl78-decode.opc"
+#line 589 "rl78-decode.opc"
           ID(add); DRB(reg); SC(1); Fza;
 
         }
@@ -4339,7 +4341,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %ea1");
-#line 666 "rl78-decode.opc"
+#line 668 "rl78-decode.opc"
           ID(mov); DR(A); SM(SP, IMMU(1));
 
         }
@@ -4354,7 +4356,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %e1");
-#line 648 "rl78-decode.opc"
+#line 650 "rl78-decode.opc"
           ID(mov); DR(A); SM(DE, 0);
 
         }
@@ -4369,7 +4371,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %ea1");
-#line 651 "rl78-decode.opc"
+#line 653 "rl78-decode.opc"
           ID(mov); DR(A); SM(DE, IMMU(1));
 
         }
@@ -4384,7 +4386,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %e1");
-#line 654 "rl78-decode.opc"
+#line 656 "rl78-decode.opc"
           ID(mov); DR(A); SM(HL, 0);
 
         }
@@ -4399,7 +4401,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %ea1");
-#line 657 "rl78-decode.opc"
+#line 659 "rl78-decode.opc"
           ID(mov); DR(A); SM(HL, IMMU(1));
 
         }
@@ -4414,7 +4416,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %1");
-#line 690 "rl78-decode.opc"
+#line 692 "rl78-decode.opc"
           ID(mov); DR(A); SM(None, SADDR);
 
         }
@@ -4429,7 +4431,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %s1");
-#line 687 "rl78-decode.opc"
+#line 689 "rl78-decode.opc"
           ID(mov); DR(A); SM(None, SFR);
 
         }
@@ -4444,7 +4446,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %e!1");
-#line 645 "rl78-decode.opc"
+#line 647 "rl78-decode.opc"
           ID(mov); DR(A); SM(None, IMMU(2));
 
         }
@@ -4459,7 +4461,7 @@
     case 0x97:
         {
           /** 1001 0reg			dec	%0				*/
-#line 554 "rl78-decode.opc"
+#line 556 "rl78-decode.opc"
           int reg AU = op[0] & 0x07;
           if (trace)
             {
@@ -4469,7 +4471,7 @@
               printf ("  reg = 0x%x\n", reg);
             }
           SYNTAX("dec	%0");
-#line 554 "rl78-decode.opc"
+#line 556 "rl78-decode.opc"
           ID(sub); DRB(reg); SC(1); Fza;
 
         }
@@ -4484,7 +4486,7 @@
                      op[0]);
             }
           SYNTAX("mov	%a0, %1");
-#line 642 "rl78-decode.opc"
+#line 644 "rl78-decode.opc"
           ID(mov); DM(SP, IMMU(1)); SR(A);
 
         }
@@ -4499,7 +4501,7 @@
                      op[0]);
             }
           SYNTAX("mov	%e0, %1");
-#line 615 "rl78-decode.opc"
+#line 617 "rl78-decode.opc"
           ID(mov); DM(DE, 0); SR(A);
 
         }
@@ -4514,7 +4516,7 @@
                      op[0]);
             }
           SYNTAX("mov	%ea0, %1");
-#line 621 "rl78-decode.opc"
+#line 623 "rl78-decode.opc"
           ID(mov); DM(DE, IMMU(1)); SR(A);
 
         }
@@ -4529,7 +4531,7 @@
                      op[0]);
             }
           SYNTAX("mov	%e0, %1");
-#line 624 "rl78-decode.opc"
+#line 626 "rl78-decode.opc"
           ID(mov); DM(HL, 0); SR(A);
 
         }
@@ -4544,7 +4546,7 @@
                      op[0]);
             }
           SYNTAX("mov	%ea0, %1");
-#line 633 "rl78-decode.opc"
+#line 635 "rl78-decode.opc"
           ID(mov); DM(HL, IMMU(1)); SR(A);
 
         }
@@ -4559,7 +4561,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %1");
-#line 747 "rl78-decode.opc"
+#line 749 "rl78-decode.opc"
           ID(mov); DM(None, SADDR); SR(A);
 
         }
@@ -4574,7 +4576,7 @@
                      op[0]);
             }
           SYNTAX("mov	%s0, %1");
-#line 780 "rl78-decode.opc"
+#line 782 "rl78-decode.opc"
           ID(mov); DM(None, SFR); SR(A);
 
         /*----------------------------------------------------------------------*/
@@ -4591,7 +4593,7 @@
                      op[0]);
             }
           SYNTAX("mov	%e!0, %1");
-#line 612 "rl78-decode.opc"
+#line 614 "rl78-decode.opc"
           ID(mov); DM(None, IMMU(2)); SR(A);
 
         }
@@ -4606,7 +4608,7 @@
                      op[0]);
             }
           SYNTAX("inc	%e!0");
-#line 581 "rl78-decode.opc"
+#line 583 "rl78-decode.opc"
           ID(add); DM(None, IMMU(2)); SC(1); Fza;
 
         }
@@ -4617,7 +4619,7 @@
     case 0xa7:
         {
           /** 1010 0rg1			incw	%0				*/
-#line 601 "rl78-decode.opc"
+#line 603 "rl78-decode.opc"
           int rg AU = (op[0] >> 1) & 0x03;
           if (trace)
             {
@@ -4627,7 +4629,7 @@
               printf ("  rg = 0x%x\n", rg);
             }
           SYNTAX("incw	%0");
-#line 601 "rl78-decode.opc"
+#line 603 "rl78-decode.opc"
           ID(add); W(); DRW(rg); SC(1);
 
         }
@@ -4642,7 +4644,7 @@
                      op[0]);
             }
           SYNTAX("incw	%e!0");
-#line 595 "rl78-decode.opc"
+#line 597 "rl78-decode.opc"
           ID(add); W(); DM(None, IMMU(2)); SC(1);
 
         }
@@ -4657,7 +4659,7 @@
                      op[0]);
             }
           SYNTAX("inc	%0");
-#line 590 "rl78-decode.opc"
+#line 592 "rl78-decode.opc"
           ID(add); DM(None, SADDR); SC(1); Fza;
 
         /*----------------------------------------------------------------------*/
@@ -4674,7 +4676,7 @@
                      op[0]);
             }
           SYNTAX("incw	%0");
-#line 604 "rl78-decode.opc"
+#line 606 "rl78-decode.opc"
           ID(add); W(); DM(None, SADDR); SC(1);
 
         /*----------------------------------------------------------------------*/
@@ -4691,7 +4693,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %a1");
-#line 850 "rl78-decode.opc"
+#line 852 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SM(SP, IMMU(1));
 
         }
@@ -4706,7 +4708,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %e1");
-#line 838 "rl78-decode.opc"
+#line 840 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SM(DE, 0);
 
         }
@@ -4721,7 +4723,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %ea1");
-#line 841 "rl78-decode.opc"
+#line 843 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SM(DE, IMMU(1));
 
         }
@@ -4736,7 +4738,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %e1");
-#line 844 "rl78-decode.opc"
+#line 846 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SM(HL, 0);
 
         }
@@ -4751,7 +4753,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %ea1");
-#line 847 "rl78-decode.opc"
+#line 849 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SM(HL, IMMU(1));
 
         }
@@ -4766,7 +4768,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %1");
-#line 880 "rl78-decode.opc"
+#line 882 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SM(None, SADDR);
 
         }
@@ -4781,7 +4783,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %s1");
-#line 883 "rl78-decode.opc"
+#line 885 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SM(None, SFR);
 
         }
@@ -4796,7 +4798,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %e!1");
-#line 834 "rl78-decode.opc"
+#line 836 "rl78-decode.opc"
           ID(mov); W(); DR(AX); SM(None, IMMU(2));
 
 
@@ -4812,7 +4814,7 @@
                      op[0]);
             }
           SYNTAX("dec	%e!0");
-#line 548 "rl78-decode.opc"
+#line 550 "rl78-decode.opc"
           ID(sub); DM(None, IMMU(2)); SC(1); Fza;
 
         }
@@ -4823,7 +4825,7 @@
     case 0xb7:
         {
           /** 1011 0rg1 			decw	%0				*/
-#line 568 "rl78-decode.opc"
+#line 570 "rl78-decode.opc"
           int rg AU = (op[0] >> 1) & 0x03;
           if (trace)
             {
@@ -4833,7 +4835,7 @@
               printf ("  rg = 0x%x\n", rg);
             }
           SYNTAX("decw	%0");
-#line 568 "rl78-decode.opc"
+#line 570 "rl78-decode.opc"
           ID(sub); W(); DRW(rg); SC(1);
 
         }
@@ -4848,7 +4850,7 @@
                      op[0]);
             }
           SYNTAX("decw	%e!0");
-#line 562 "rl78-decode.opc"
+#line 564 "rl78-decode.opc"
           ID(sub); W(); DM(None, IMMU(2)); SC(1);
 
         }
@@ -4863,7 +4865,7 @@
                      op[0]);
             }
           SYNTAX("dec	%0");
-#line 557 "rl78-decode.opc"
+#line 559 "rl78-decode.opc"
           ID(sub); DM(None, SADDR); SC(1); Fza;
 
         /*----------------------------------------------------------------------*/
@@ -4880,7 +4882,7 @@
                      op[0]);
             }
           SYNTAX("decw	%0");
-#line 571 "rl78-decode.opc"
+#line 573 "rl78-decode.opc"
           ID(sub); W(); DM(None, SADDR); SC(1);
 
         /*----------------------------------------------------------------------*/
@@ -4897,7 +4899,7 @@
                      op[0]);
             }
           SYNTAX("movw	%a0, %1");
-#line 831 "rl78-decode.opc"
+#line 833 "rl78-decode.opc"
           ID(mov); W(); DM(SP, IMMU(1)); SR(AX);
 
         }
@@ -4912,7 +4914,7 @@
                      op[0]);
             }
           SYNTAX("movw	%e0, %1");
-#line 819 "rl78-decode.opc"
+#line 821 "rl78-decode.opc"
           ID(mov); W(); DM(DE, 0); SR(AX);
 
         }
@@ -4927,7 +4929,7 @@
                      op[0]);
             }
           SYNTAX("movw	%ea0, %1");
-#line 822 "rl78-decode.opc"
+#line 824 "rl78-decode.opc"
           ID(mov); W(); DM(DE, IMMU(1)); SR(AX);
 
         }
@@ -4942,7 +4944,7 @@
                      op[0]);
             }
           SYNTAX("movw	%e0, %1");
-#line 825 "rl78-decode.opc"
+#line 827 "rl78-decode.opc"
           ID(mov); W(); DM(HL, 0); SR(AX);
 
         }
@@ -4957,7 +4959,7 @@
                      op[0]);
             }
           SYNTAX("movw	%ea0, %1");
-#line 828 "rl78-decode.opc"
+#line 830 "rl78-decode.opc"
           ID(mov); W(); DM(HL, IMMU(1)); SR(AX);
 
         }
@@ -4972,7 +4974,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, %1");
-#line 895 "rl78-decode.opc"
+#line 897 "rl78-decode.opc"
           ID(mov); W(); DM(None, SADDR); SR(AX);
 
         }
@@ -4987,7 +4989,7 @@
                      op[0]);
             }
           SYNTAX("movw	%s0, %1");
-#line 901 "rl78-decode.opc"
+#line 903 "rl78-decode.opc"
           ID(mov); W(); DM(None, SFR); SR(AX);
 
         /*----------------------------------------------------------------------*/
@@ -5004,7 +5006,7 @@
                      op[0]);
             }
           SYNTAX("movw	%e!0, %1");
-#line 816 "rl78-decode.opc"
+#line 818 "rl78-decode.opc"
           ID(mov); W(); DM(None, IMMU(2)); SR(AX);
 
         }
@@ -5015,7 +5017,7 @@
     case 0xc6:
         {
           /** 1100 0rg0			pop	%0				*/
-#line 986 "rl78-decode.opc"
+#line 988 "rl78-decode.opc"
           int rg AU = (op[0] >> 1) & 0x03;
           if (trace)
             {
@@ -5025,7 +5027,7 @@
               printf ("  rg = 0x%x\n", rg);
             }
           SYNTAX("pop	%0");
-#line 986 "rl78-decode.opc"
+#line 988 "rl78-decode.opc"
           ID(mov); W(); DRW(rg); SPOP();
 
         }
@@ -5036,7 +5038,7 @@
     case 0xc7:
         {
           /** 1100 0rg1			push	%1				*/
-#line 994 "rl78-decode.opc"
+#line 996 "rl78-decode.opc"
           int rg AU = (op[0] >> 1) & 0x03;
           if (trace)
             {
@@ -5046,7 +5048,7 @@
               printf ("  rg = 0x%x\n", rg);
             }
           SYNTAX("push	%1");
-#line 994 "rl78-decode.opc"
+#line 996 "rl78-decode.opc"
           ID(mov); W(); DPUSH(); SRW(rg);
 
         }
@@ -5061,7 +5063,7 @@
                      op[0]);
             }
           SYNTAX("mov	%a0, #%1");
-#line 639 "rl78-decode.opc"
+#line 641 "rl78-decode.opc"
           ID(mov); DM(SP, IMMU(1)); SC(IMMU(1));
 
         }
@@ -5076,7 +5078,7 @@
                      op[0]);
             }
           SYNTAX("movw	%0, #%1");
-#line 892 "rl78-decode.opc"
+#line 894 "rl78-decode.opc"
           ID(mov); W(); DM(None, SADDR); SC(IMMU(2));
 
         }
@@ -5091,7 +5093,7 @@
                      op[0]);
             }
           SYNTAX("mov	%ea0, #%1");
-#line 618 "rl78-decode.opc"
+#line 620 "rl78-decode.opc"
           ID(mov); DM(DE, IMMU(1)); SC(IMMU(1));
 
         }
@@ -5106,7 +5108,7 @@
                      op[0]);
             }
           SYNTAX("movw	%s0, #%1");
-#line 898 "rl78-decode.opc"
+#line 900 "rl78-decode.opc"
           ID(mov); W(); DM(None, SFR); SC(IMMU(2));
 
         }
@@ -5121,7 +5123,7 @@
                      op[0]);
             }
           SYNTAX("mov	%ea0, #%1");
-#line 630 "rl78-decode.opc"
+#line 632 "rl78-decode.opc"
           ID(mov); DM(HL, IMMU(1)); SC(IMMU(1));
 
         }
@@ -5136,7 +5138,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, #%1");
-#line 744 "rl78-decode.opc"
+#line 746 "rl78-decode.opc"
           ID(mov); DM(None, SADDR); SC(IMMU(1));
 
         }
@@ -5151,7 +5153,7 @@
                      op[0]);
             }
           SYNTAX("mov	%s0, #%1");
-#line 750 "rl78-decode.opc"
+#line 752 "rl78-decode.opc"
           op0 = SFR;
           op1 = IMMU(1);
           ID(mov); DM(None, op0); SC(op1);
@@ -5193,7 +5195,7 @@
                      op[0]);
             }
           SYNTAX("mov	%e!0, #%1");
-#line 609 "rl78-decode.opc"
+#line 611 "rl78-decode.opc"
           ID(mov); DM(None, IMMU(2)); SC(IMMU(1));
 
         }
@@ -5204,7 +5206,7 @@
     case 0xd3:
         {
           /** 1101 00rg			cmp0	%0				*/
-#line 518 "rl78-decode.opc"
+#line 520 "rl78-decode.opc"
           int rg AU = op[0] & 0x03;
           if (trace)
             {
@@ -5214,7 +5216,7 @@
               printf ("  rg = 0x%x\n", rg);
             }
           SYNTAX("cmp0	%0");
-#line 518 "rl78-decode.opc"
+#line 520 "rl78-decode.opc"
           ID(cmp); DRB(rg); SC(0); Fzac;
 
         }
@@ -5229,7 +5231,7 @@
                      op[0]);
             }
           SYNTAX("cmp0	%0");
-#line 521 "rl78-decode.opc"
+#line 523 "rl78-decode.opc"
           ID(cmp); DM(None, SADDR); SC(0); Fzac;
 
         /*----------------------------------------------------------------------*/
@@ -5246,7 +5248,7 @@
                      op[0]);
             }
           SYNTAX("cmp0	%e!0");
-#line 515 "rl78-decode.opc"
+#line 517 "rl78-decode.opc"
           ID(cmp); DM(None, IMMU(2)); SC(0); Fzac;
 
         }
@@ -5261,7 +5263,7 @@
                      op[0]);
             }
           SYNTAX("mulu	x");
-#line 906 "rl78-decode.opc"
+#line 908 "rl78-decode.opc"
           ID(mulu);
 
         /*----------------------------------------------------------------------*/
@@ -5278,7 +5280,7 @@
                      op[0]);
             }
           SYNTAX("ret");
-#line 1002 "rl78-decode.opc"
+#line 1004 "rl78-decode.opc"
           ID(ret);
 
         }
@@ -5293,7 +5295,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %1");
-#line 711 "rl78-decode.opc"
+#line 713 "rl78-decode.opc"
           ID(mov); DR(X); SM(None, SADDR);
 
         }
@@ -5308,7 +5310,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %e!1");
-#line 708 "rl78-decode.opc"
+#line 710 "rl78-decode.opc"
           ID(mov); DR(X); SM(None, IMMU(2));
 
         }
@@ -5318,7 +5320,7 @@
     case 0xfa:
         {
           /** 11ra 1010			movw	%0, %1				*/
-#line 889 "rl78-decode.opc"
+#line 891 "rl78-decode.opc"
           int ra AU = (op[0] >> 4) & 0x03;
           if (trace)
             {
@@ -5328,7 +5330,7 @@
               printf ("  ra = 0x%x\n", ra);
             }
           SYNTAX("movw	%0, %1");
-#line 889 "rl78-decode.opc"
+#line 891 "rl78-decode.opc"
           ID(mov); W(); DRW(ra); SM(None, SADDR);
 
         }
@@ -5338,7 +5340,7 @@
     case 0xfb:
         {
           /** 11ra 1011			movw	%0, %es!1			*/
-#line 886 "rl78-decode.opc"
+#line 888 "rl78-decode.opc"
           int ra AU = (op[0] >> 4) & 0x03;
           if (trace)
             {
@@ -5348,7 +5350,7 @@
               printf ("  ra = 0x%x\n", ra);
             }
           SYNTAX("movw	%0, %es!1");
-#line 886 "rl78-decode.opc"
+#line 888 "rl78-decode.opc"
           ID(mov); W(); DRW(ra); SM(None, IMMU(2));
 
         }
@@ -5363,7 +5365,7 @@
                      op[0]);
             }
           SYNTAX("bc	$%a0");
-#line 334 "rl78-decode.opc"
+#line 336 "rl78-decode.opc"
           ID(branch_cond); DC(pc+IMMS(1)+2); SR(None); COND(C);
 
         }
@@ -5378,7 +5380,7 @@
                      op[0]);
             }
           SYNTAX("bz	$%a0");
-#line 346 "rl78-decode.opc"
+#line 348 "rl78-decode.opc"
           ID(branch_cond); DC(pc+IMMS(1)+2); SR(None); COND(Z);
 
         }
@@ -5393,7 +5395,7 @@
                      op[0]);
             }
           SYNTAX("bnc	$%a0");
-#line 337 "rl78-decode.opc"
+#line 339 "rl78-decode.opc"
           ID(branch_cond); DC(pc+IMMS(1)+2); SR(None); COND(NC);
 
         }
@@ -5408,7 +5410,7 @@
                      op[0]);
             }
           SYNTAX("bnz	$%a0");
-#line 349 "rl78-decode.opc"
+#line 351 "rl78-decode.opc"
           ID(branch_cond); DC(pc+IMMS(1)+2); SR(None); COND(NZ);
 
         /*----------------------------------------------------------------------*/
@@ -5421,7 +5423,7 @@
     case 0xe3:
         {
           /** 1110 00rg			oneb	%0				*/
-#line 924 "rl78-decode.opc"
+#line 926 "rl78-decode.opc"
           int rg AU = op[0] & 0x03;
           if (trace)
             {
@@ -5431,7 +5433,7 @@
               printf ("  rg = 0x%x\n", rg);
             }
           SYNTAX("oneb	%0");
-#line 924 "rl78-decode.opc"
+#line 926 "rl78-decode.opc"
           ID(mov); DRB(rg); SC(1);
 
         }
@@ -5446,7 +5448,7 @@
                      op[0]);
             }
           SYNTAX("oneb	%0");
-#line 927 "rl78-decode.opc"
+#line 929 "rl78-decode.opc"
           ID(mov); DM(None, SADDR); SC(1);
 
         /*----------------------------------------------------------------------*/
@@ -5463,7 +5465,7 @@
                      op[0]);
             }
           SYNTAX("oneb	%e!0");
-#line 921 "rl78-decode.opc"
+#line 923 "rl78-decode.opc"
           ID(mov); DM(None, IMMU(2)); SC(1);
 
         }
@@ -5478,7 +5480,7 @@
                      op[0]);
             }
           SYNTAX("onew	%0");
-#line 932 "rl78-decode.opc"
+#line 934 "rl78-decode.opc"
           ID(mov); DR(AX); SC(1);
 
         }
@@ -5493,7 +5495,7 @@
                      op[0]);
             }
           SYNTAX("onew	%0");
-#line 935 "rl78-decode.opc"
+#line 937 "rl78-decode.opc"
           ID(mov); DR(BC); SC(1);
 
         /*----------------------------------------------------------------------*/
@@ -5510,7 +5512,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %1");
-#line 699 "rl78-decode.opc"
+#line 701 "rl78-decode.opc"
           ID(mov); DR(B); SM(None, SADDR);
 
         }
@@ -5525,7 +5527,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %e!1");
-#line 693 "rl78-decode.opc"
+#line 695 "rl78-decode.opc"
           ID(mov); DR(B); SM(None, IMMU(2));
 
         }
@@ -5540,7 +5542,7 @@
                      op[0]);
             }
           SYNTAX("br	!%!a0");
-#line 368 "rl78-decode.opc"
+#line 370 "rl78-decode.opc"
           ID(branch); DC(IMMU(3));
 
         }
@@ -5555,7 +5557,7 @@
                      op[0]);
             }
           SYNTAX("br	%!a0");
-#line 371 "rl78-decode.opc"
+#line 373 "rl78-decode.opc"
           ID(branch); DC(IMMU(2));
 
         }
@@ -5570,7 +5572,7 @@
                      op[0]);
             }
           SYNTAX("br	$%!a0");
-#line 374 "rl78-decode.opc"
+#line 376 "rl78-decode.opc"
           ID(branch); DC(pc+IMMS(2)+3);
 
         }
@@ -5585,7 +5587,7 @@
                      op[0]);
             }
           SYNTAX("br	$%a0");
-#line 377 "rl78-decode.opc"
+#line 379 "rl78-decode.opc"
           ID(branch); DC(pc+IMMS(1)+2);
 
         }
@@ -5596,7 +5598,7 @@
     case 0xf3:
         {
           /** 1111 00rg			clrb	%0				*/
-#line 464 "rl78-decode.opc"
+#line 466 "rl78-decode.opc"
           int rg AU = op[0] & 0x03;
           if (trace)
             {
@@ -5606,7 +5608,7 @@
               printf ("  rg = 0x%x\n", rg);
             }
           SYNTAX("clrb	%0");
-#line 464 "rl78-decode.opc"
+#line 466 "rl78-decode.opc"
           ID(mov); DRB(rg); SC(0);
 
         }
@@ -5621,7 +5623,7 @@
                      op[0]);
             }
           SYNTAX("clrb	%0");
-#line 467 "rl78-decode.opc"
+#line 469 "rl78-decode.opc"
           ID(mov); DM(None, SADDR); SC(0);
 
         /*----------------------------------------------------------------------*/
@@ -5638,7 +5640,7 @@
                      op[0]);
             }
           SYNTAX("clrb	%e!0");
-#line 461 "rl78-decode.opc"
+#line 463 "rl78-decode.opc"
           ID(mov); DM(None, IMMU(2)); SC(0);
 
         }
@@ -5653,7 +5655,7 @@
                      op[0]);
             }
           SYNTAX("clrw	%0");
-#line 472 "rl78-decode.opc"
+#line 474 "rl78-decode.opc"
           ID(mov); DR(AX); SC(0);
 
         }
@@ -5668,7 +5670,7 @@
                      op[0]);
             }
           SYNTAX("clrw	%0");
-#line 475 "rl78-decode.opc"
+#line 477 "rl78-decode.opc"
           ID(mov); DR(BC); SC(0);
 
         /*----------------------------------------------------------------------*/
@@ -5685,7 +5687,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %1");
-#line 705 "rl78-decode.opc"
+#line 707 "rl78-decode.opc"
           ID(mov); DR(C); SM(None, SADDR);
 
         }
@@ -5700,7 +5702,7 @@
                      op[0]);
             }
           SYNTAX("mov	%0, %e!1");
-#line 702 "rl78-decode.opc"
+#line 704 "rl78-decode.opc"
           ID(mov); DR(C); SM(None, IMMU(2));
 
         }
@@ -5715,7 +5717,7 @@
                      op[0]);
             }
           SYNTAX("call	!%!a0");
-#line 421 "rl78-decode.opc"
+#line 423 "rl78-decode.opc"
           ID(call); DC(IMMU(3));
 
         }
@@ -5730,7 +5732,7 @@
                      op[0]);
             }
           SYNTAX("call	%!a0");
-#line 424 "rl78-decode.opc"
+#line 426 "rl78-decode.opc"
           ID(call); DC(IMMU(2));
 
         }
@@ -5745,7 +5747,7 @@
                      op[0]);
             }
           SYNTAX("call	$%!a0");
-#line 427 "rl78-decode.opc"
+#line 429 "rl78-decode.opc"
           ID(call); DC(pc+IMMS(2)+3);
 
         }
@@ -5760,13 +5762,13 @@
                      op[0]);
             }
           SYNTAX("brk1");
-#line 385 "rl78-decode.opc"
+#line 387 "rl78-decode.opc"
           ID(break);
 
         }
       break;
   }
-#line 1290 "rl78-decode.opc"
+#line 1292 "rl78-decode.opc"
 
   return rl78->n_bytes;
 }
Index: git/opcodes/rl78-decode.opc
===================================================================
--- git.orig/opcodes/rl78-decode.opc	2017-09-21 13:14:42.256835775 +0530
+++ git/opcodes/rl78-decode.opc	2017-09-21 13:14:49.444888350 +0530
@@ -50,7 +50,9 @@
 #define W() rl78->size = RL78_Word
 
 #define AU ATTRIBUTE_UNUSED
-#define GETBYTE() (ld->op [ld->rl78->n_bytes++] = ld->getbyte (ld->ptr))
+
+#define OP_BUF_LEN 20
+#define GETBYTE() (ld->rl78->n_bytes < (OP_BUF_LEN - 1) ? ld->op [ld->rl78->n_bytes++] = ld->getbyte (ld->ptr): 0)
 #define B ((unsigned long) GETBYTE())
 
 #define SYNTAX(x) rl78->syntax = x
@@ -168,7 +170,7 @@
 		  RL78_Dis_Isa isa)
 {
   LocalData lds, * ld = &lds;
-  unsigned char op_buf[20] = {0};
+  unsigned char op_buf[OP_BUF_LEN] = {0};
   unsigned char *op = op_buf;
   int op0, op1;
 
Index: git/opcodes/ChangeLog
===================================================================
--- git.orig/opcodes/ChangeLog	2017-09-21 13:14:41.676831533 +0530
+++ git/opcodes/ChangeLog	2017-09-21 13:16:51.065779064 +0530
@@ -1,3 +1,12 @@
+2017-06-15  Nick Clifton  <nickc@redhat.com>
+
+	PR binutils/21588
+	* rl78-decode.opc (OP_BUF_LEN): Define.
+	(GETBYTE): Check for the index exceeding OP_BUF_LEN.
+	(rl78_decode_opcode): Use OP_BUF_LEN as the length of the op_buf
+	array.
+	* rl78-decode.c: Regenerate.
+
 2016-08-03  Tristan Gingold  <gingold@adacore.com>
 
 	* configure: Regenerate.
